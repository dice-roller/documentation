import{_ as e,o as a,c as l,e as t}from"./app-e7f8d9af.js";const s={},o=t(`<h1 id="rollresult" tabindex="-1"><a class="header-anchor" href="#rollresult" aria-hidden="true">#</a> RollResult</h1><p><a name="RollResult"></a></p><h2 id="rollresult-1" tabindex="-1"><a class="header-anchor" href="#rollresult-1" aria-hidden="true">#</a> RollResult</h2><p>A <code>RollResult</code> represents the value and applicable modifiers for a single die roll</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You will probably not need to create your own <code>RollResult</code> instances, unless you&#39;re importing rolls, but <code>RollResult</code> objects will be returned when rolling dice.</p></div><p><strong>Kind</strong>: global class</p><ul><li><a href="#RollResult">RollResult</a><ul><li><a href="#new_RollResult_new">new RollResult(value, [modifiers], [useInTotal])</a></li><li><a href="#RollResult+calculationValue">.calculationValue</a> ⇒ <code>number</code></li><li><a href="#RollResult+calculationValue">.calculationValue</a></li><li><a href="#RollResult+initialValue">.initialValue</a> ⇒ <code>number</code></li><li><a href="#RollResult+modifierFlags">.modifierFlags</a> ⇒ <code>string</code></li><li><a href="#RollResult+modifiers">.modifiers</a> ⇒ <code>Set.&lt;string&gt;</code></li><li><a href="#RollResult+modifiers">.modifiers</a></li><li><a href="#RollResult+useInTotal">.useInTotal</a> ⇒ <code>boolean</code></li><li><a href="#RollResult+useInTotal">.useInTotal</a></li><li><a href="#RollResult+value">.value</a> ⇒ <code>number</code></li><li><a href="#RollResult+value">.value</a></li><li><a href="#RollResult+toJSON">.toJSON()</a> ⇒ <code>Object</code></li><li><a href="#RollResult+toString">.toString()</a> ⇒ <code>string</code></li></ul></li></ul><p><a name="new_RollResult_new"></a></p><h3 id="new-rollresult-value-modifiers-useintotal" tabindex="-1"><a class="header-anchor" href="#new-rollresult-value-modifiers-useintotal" aria-hidden="true">#</a> new RollResult(value, [modifiers], [useInTotal])</h3><p>Create a <code>RollResult</code> instance.</p><p><code>value</code> can be a number, or an object containing a list of different values. This allows you to specify the <code>initialValue</code>, <code>value</code> and <code>calculationValue</code> with different values.</p><p><strong>Throws</strong>:</p><ul><li><code>TypeError</code> Result value, calculation value, or modifiers are invalid</li></ul><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>value</td><td><code>number</code> | <code>Object</code></td><td></td><td>The value rolled</td></tr><tr><td>[value.value]</td><td><code>number</code></td><td></td><td>The value with modifiers applied</td></tr><tr><td>[value.initialValue]</td><td><code>number</code></td><td></td><td>The initial, unmodified value rolled</td></tr><tr><td>[value.calculationValue]</td><td><code>number</code></td><td></td><td>The value used in calculations</td></tr><tr><td>[modifiers]</td><td><code>Array.&lt;string&gt;</code> | <code>Set.&lt;string&gt;</code></td><td><code>[]</code></td><td>List of modifier names that affect this roll</td></tr><tr><td>[useInTotal]</td><td><code>boolean</code></td><td><code>true</code></td><td>Whether to include the roll value when calculating totals</td></tr></tbody></table><p><strong>Example</strong> <em>(Numerical value)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RollResult</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Example</strong> <em>(Object value)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// must provide either \`value\` or \`initialValue\`</span>
<span class="token comment">// \`calculationValue\` is optional.</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RollResult</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
  <span class="token literal-property property">initialValue</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token literal-property property">calculationValue</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example</strong> <em>(With modifiers)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RollResult</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;explode&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;critical-success&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="RollResult+calculationValue"></a></p><h3 id="rollresult-calculationvalue-⇒-number" tabindex="-1"><a class="header-anchor" href="#rollresult-calculationvalue-⇒-number" aria-hidden="true">#</a> rollResult.calculationValue ⇒ <code>number</code></h3><p>The value to use in calculations. This may be changed by modifiers.</p><p><strong>Kind</strong>: instance property of <a href="#RollResult"><code>RollResult</code></a><br><a name="RollResult+calculationValue"></a></p><h3 id="rollresult-calculationvalue" tabindex="-1"><a class="header-anchor" href="#rollresult-calculationvalue" aria-hidden="true">#</a> rollResult.calculationValue</h3><p>Set the value to use in calculations.</p><p><strong>Kind</strong>: instance property of <a href="#RollResult"><code>RollResult</code></a><br><strong>Throws</strong>:</p><ul><li><code>TypeError</code> value is invalid</li></ul><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><code>number</code></td></tr></tbody></table><p><a name="RollResult+initialValue"></a></p><h3 id="rollresult-initialvalue-⇒-number" tabindex="-1"><a class="header-anchor" href="#rollresult-initialvalue-⇒-number" aria-hidden="true">#</a> rollResult.initialValue ⇒ <code>number</code></h3><p>The initial roll value before any modifiers.</p><p>Not used for calculations and is just for reference. You probably want <code>value</code> instead.</p><p><strong>Kind</strong>: instance property of <a href="#RollResult"><code>RollResult</code></a><br><strong>See</strong>: <a href="#RollResult+value">value</a><br><a name="RollResult+modifierFlags"></a></p><h3 id="rollresult-modifierflags-⇒-string" tabindex="-1"><a class="header-anchor" href="#rollresult-modifierflags-⇒-string" aria-hidden="true">#</a> rollResult.modifierFlags ⇒ <code>string</code></h3><p>The visual flags for the modifiers that affect the roll.</p><p><strong>Kind</strong>: instance property of <a href="#RollResult"><code>RollResult</code></a><br><strong>See</strong>: <a href="#RollResult+modifiers">modifiers</a><br><a name="RollResult+modifiers"></a></p><h3 id="rollresult-modifiers-⇒-set-string" tabindex="-1"><a class="header-anchor" href="#rollresult-modifiers-⇒-set-string" aria-hidden="true">#</a> rollResult.modifiers ⇒ <code>Set.&lt;string&gt;</code></h3><p>The names of modifiers that affect the roll.</p><p><strong>Kind</strong>: instance property of <a href="#RollResult"><code>RollResult</code></a><br><a name="RollResult+modifiers"></a></p><h3 id="rollresult-modifiers" tabindex="-1"><a class="header-anchor" href="#rollresult-modifiers" aria-hidden="true">#</a> rollResult.modifiers</h3><p>Set the modifier names that affect the roll.</p><p><strong>Kind</strong>: instance property of <a href="#RollResult"><code>RollResult</code></a><br><strong>Throws</strong>:</p><ul><li><code>TypeError</code> modifiers must be a Set or array of modifier names</li></ul><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><code>Array.&lt;string&gt;</code> | <code>Set.&lt;string&gt;</code></td></tr></tbody></table><p><strong>Example</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>rollResult<span class="token punctuation">.</span>modifiers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;explode&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;re-roll&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="RollResult+useInTotal"></a></p><h3 id="rollresult-useintotal-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#rollresult-useintotal-⇒-boolean" aria-hidden="true">#</a> rollResult.useInTotal ⇒ <code>boolean</code></h3><p>Whether to use the value in total calculations or not.</p><p><strong>Kind</strong>: instance property of <a href="#RollResult"><code>RollResult</code></a><br><a name="RollResult+useInTotal"></a></p><h3 id="rollresult-useintotal" tabindex="-1"><a class="header-anchor" href="#rollresult-useintotal" aria-hidden="true">#</a> rollResult.useInTotal</h3><p>Set whether to use the value in total calculations or not.</p><p><strong>Kind</strong>: instance property of <a href="#RollResult"><code>RollResult</code></a></p><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><code>boolean</code></td></tr></tbody></table><p><a name="RollResult+value"></a></p><h3 id="rollresult-value-⇒-number" tabindex="-1"><a class="header-anchor" href="#rollresult-value-⇒-number" aria-hidden="true">#</a> rollResult.value ⇒ <code>number</code></h3><p>Value of the roll after modifiers have been applied.</p><p><strong>Kind</strong>: instance property of <a href="#RollResult"><code>RollResult</code></a><br><a name="RollResult+value"></a></p><h3 id="rollresult-value" tabindex="-1"><a class="header-anchor" href="#rollresult-value" aria-hidden="true">#</a> rollResult.value</h3><p>Set the roll value.</p><p><strong>Kind</strong>: instance property of <a href="#RollResult"><code>RollResult</code></a><br><strong>Throws</strong>:</p><ul><li><code>RangeError</code> value must be finite</li><li><code>TypeError</code> value is invalid</li></ul><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><code>number</code></td></tr></tbody></table><p><a name="RollResult+toJSON"></a></p><h3 id="rollresult-tojson-⇒-object" tabindex="-1"><a class="header-anchor" href="#rollresult-tojson-⇒-object" aria-hidden="true">#</a> rollResult.toJSON() ⇒ <code>Object</code></h3><p>Return an object for JSON serialising.</p><p>This is called automatically when JSON encoding the object.</p><p><strong>Kind</strong>: instance method of <a href="#RollResult"><code>RollResult</code></a><br><a name="RollResult+toString"></a></p><h3 id="rollresult-tostring-⇒-string" tabindex="-1"><a class="header-anchor" href="#rollresult-tostring-⇒-string" aria-hidden="true">#</a> rollResult.toString() ⇒ <code>string</code></h3><p>Return the String representation of the object.</p><p>This is called automatically when casting the object to a string.</p><p><strong>Kind</strong>: instance method of <a href="#RollResult"><code>RollResult</code></a></p>`,73),n=[o];function r(i,d){return a(),l("div",null,n)}const c=e(s,[["render",r],["__file","RollResult.html.vue"]]);export{c as default};
