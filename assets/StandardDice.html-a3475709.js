import{_ as e,o as d,c as a,e as r}from"./app-e7f8d9af.js";const t={},i=r('<h1 id="standarddice" tabindex="-1"><a class="header-anchor" href="#standarddice" aria-hidden="true">#</a> StandardDice</h1><p><a name="StandardDice"></a></p><h2 id="standarddice-1" tabindex="-1"><a class="header-anchor" href="#standarddice-1" aria-hidden="true">#</a> StandardDice</h2><p>Represents a standard numerical die.</p><p><strong>Kind</strong>: global class</p><ul><li><a href="#StandardDice">StandardDice</a><ul><li><a href="#new_StandardDice_new">new StandardDice(sides, [qty], [modifiers], [min], [max], [description])</a></li><li><a href="#StandardDice+average">.average</a> ⇒ <code>number</code></li><li><a href="#StandardDice+modifiers">.modifiers</a> ⇒ <code>Map.&lt;string, Modifier&gt;</code> | <code>null</code></li><li><a href="#StandardDice+modifiers">.modifiers</a></li><li><a href="#StandardDice+max">.max</a> ⇒ <code>number</code></li><li><a href="#StandardDice+min">.min</a> ⇒ <code>number</code></li><li><a href="#StandardDice+name">.name</a> ⇒ <code>string</code></li><li><a href="#StandardDice+notation">.notation</a> ⇒ <code>string</code></li><li><a href="#StandardDice+qty">.qty</a> ⇒ <code>number</code></li><li><a href="#StandardDice+sides">.sides</a> ⇒ <code>number</code></li><li><a href="#StandardDice+roll">.roll()</a> ⇒ <code>RollResults</code></li><li><a href="#StandardDice+rollOnce">.rollOnce()</a> ⇒ <code>RollResult</code></li><li><a href="#StandardDice+toJSON">.toJSON()</a> ⇒ <code>Object</code></li><li><a href="#StandardDice+toString">.toString()</a> ⇒ <code>string</code></li></ul></li></ul><p><a name="new_StandardDice_new"></a></p><h3 id="new-standarddice-sides-qty-modifiers-min-max-description" tabindex="-1"><a class="header-anchor" href="#new-standarddice-sides-qty-modifiers-min-max-description" aria-hidden="true">#</a> new StandardDice(sides, [qty], [modifiers], [min], [max], [description])</h3><p>Create a <code>StandardDice</code> instance.</p><p><strong>Throws</strong>:</p><ul><li><code>RequiredArgumentError</code> sides is required</li><li><code>TypeError</code> qty must be a positive integer, and modifiers must be valid</li></ul><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>sides</td><td><code>number</code></td><td></td><td>The number of sides the die has (.e.g <code>6</code>)</td></tr><tr><td>[qty]</td><td><code>number</code></td><td><code>1</code></td><td>The number of dice to roll (e.g. <code>4</code>)</td></tr><tr><td>[modifiers]</td><td><code>Map.&lt;string, Modifier&gt;</code> | <code>Array.&lt;Modifier&gt;</code> | <code>Object</code> | <code>null</code></td><td><code></code></td><td>The modifiers that affect the die</td></tr><tr><td>[min]</td><td><code>number</code> | <code>null</code></td><td><code>1</code></td><td>The minimum possible roll value</td></tr><tr><td>[max]</td><td><code>number</code> | <code>null</code></td><td><code></code></td><td>The maximum possible roll value. Defaults to number of <code>sides</code></td></tr><tr><td>[description]</td><td><code>Description</code> | <code>string</code> | <code>null</code></td><td><code></code></td><td>The roll description.</td></tr></tbody></table><p><a name="StandardDice+average"></a></p><h3 id="standarddice-average-⇒-number" tabindex="-1"><a class="header-anchor" href="#standarddice-average-⇒-number" aria-hidden="true">#</a> standardDice.average ⇒ <code>number</code></h3><p>The average value that the die can roll (Excluding modifiers).</p><p><strong>Kind</strong>: instance property of <a href="#StandardDice"><code>StandardDice</code></a><br><a name="StandardDice+modifiers"></a></p><h3 id="standarddice-modifiers-⇒-map-string-modifier-null" tabindex="-1"><a class="header-anchor" href="#standarddice-modifiers-⇒-map-string-modifier-null" aria-hidden="true">#</a> standardDice.modifiers ⇒ <code>Map.&lt;string, Modifier&gt;</code> | <code>null</code></h3><p>The modifiers that affect this die roll.</p><p><strong>Kind</strong>: instance property of <a href="#StandardDice"><code>StandardDice</code></a><br><a name="StandardDice+modifiers"></a></p><h3 id="standarddice-modifiers" tabindex="-1"><a class="header-anchor" href="#standarddice-modifiers" aria-hidden="true">#</a> standardDice.modifiers</h3><p>Set the modifiers that affect this roll.</p><p><strong>Kind</strong>: instance property of <a href="#StandardDice"><code>StandardDice</code></a><br><strong>Throws</strong>:</p><ul><li><code>TypeError</code> Modifiers should be a Map, array of Modifiers, or an Object</li></ul><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><code>Map.&lt;string, Modifier&gt;</code> | <code>Array.&lt;Modifier&gt;</code> | <code>Object</code> | <code>null</code></td></tr></tbody></table><p><a name="StandardDice+max"></a></p><h3 id="standarddice-max-⇒-number" tabindex="-1"><a class="header-anchor" href="#standarddice-max-⇒-number" aria-hidden="true">#</a> standardDice.max ⇒ <code>number</code></h3><p>The maximum value that can be rolled on the die, excluding modifiers.</p><p><strong>Kind</strong>: instance property of <a href="#StandardDice"><code>StandardDice</code></a><br><a name="StandardDice+min"></a></p><h3 id="standarddice-min-⇒-number" tabindex="-1"><a class="header-anchor" href="#standarddice-min-⇒-number" aria-hidden="true">#</a> standardDice.min ⇒ <code>number</code></h3><p>The minimum value that can be rolled on the die, excluding modifiers.</p><p><strong>Kind</strong>: instance property of <a href="#StandardDice"><code>StandardDice</code></a><br><a name="StandardDice+name"></a></p><h3 id="standarddice-name-⇒-string" tabindex="-1"><a class="header-anchor" href="#standarddice-name-⇒-string" aria-hidden="true">#</a> standardDice.name ⇒ <code>string</code></h3><p>The name of the die.</p><p><strong>Kind</strong>: instance property of <a href="#StandardDice"><code>StandardDice</code></a><br><strong>Returns</strong>: <code>string</code> - &#39;standard&#39;<br><a name="StandardDice+notation"></a></p><h3 id="standarddice-notation-⇒-string" tabindex="-1"><a class="header-anchor" href="#standarddice-notation-⇒-string" aria-hidden="true">#</a> standardDice.notation ⇒ <code>string</code></h3><p>The dice notation. e.g. <code>4d6!</code>.</p><p><strong>Kind</strong>: instance property of <a href="#StandardDice"><code>StandardDice</code></a><br><a name="StandardDice+qty"></a></p><h3 id="standarddice-qty-⇒-number" tabindex="-1"><a class="header-anchor" href="#standarddice-qty-⇒-number" aria-hidden="true">#</a> standardDice.qty ⇒ <code>number</code></h3><p>The number of dice that should be rolled.</p><p><strong>Kind</strong>: instance property of <a href="#StandardDice"><code>StandardDice</code></a><br><a name="StandardDice+sides"></a></p><h3 id="standarddice-sides-⇒-number" tabindex="-1"><a class="header-anchor" href="#standarddice-sides-⇒-number" aria-hidden="true">#</a> standardDice.sides ⇒ <code>number</code></h3><p>The number of sides the die has.</p><p><strong>Kind</strong>: instance property of <a href="#StandardDice"><code>StandardDice</code></a><br><a name="StandardDice+roll"></a></p><h3 id="standarddice-roll-⇒-rollresults" tabindex="-1"><a class="header-anchor" href="#standarddice-roll-⇒-rollresults" aria-hidden="true">#</a> standardDice.roll() ⇒ <code>RollResults</code></h3><p>Roll the dice for the specified quantity and apply any modifiers.</p><p><strong>Kind</strong>: instance method of <a href="#StandardDice"><code>StandardDice</code></a><br><strong>Returns</strong>: <code>RollResults</code> - The result of the roll<br><a name="StandardDice+rollOnce"></a></p><h3 id="standarddice-rollonce-⇒-rollresult" tabindex="-1"><a class="header-anchor" href="#standarddice-rollonce-⇒-rollresult" aria-hidden="true">#</a> standardDice.rollOnce() ⇒ <code>RollResult</code></h3><p>Roll a single die and return the value.</p><p><strong>Kind</strong>: instance method of <a href="#StandardDice"><code>StandardDice</code></a><br><strong>Returns</strong>: <code>RollResult</code> - The value rolled<br><a name="StandardDice+toJSON"></a></p><h3 id="standarddice-tojson-⇒-object" tabindex="-1"><a class="header-anchor" href="#standarddice-tojson-⇒-object" aria-hidden="true">#</a> standardDice.toJSON() ⇒ <code>Object</code></h3><p>Return an object for JSON serialising.</p><p>This is called automatically when JSON encoding the object.</p><p><strong>Kind</strong>: instance method of <a href="#StandardDice"><code>StandardDice</code></a><br><a name="StandardDice+toString"></a></p><h3 id="standarddice-tostring-⇒-string" tabindex="-1"><a class="header-anchor" href="#standarddice-tostring-⇒-string" aria-hidden="true">#</a> standardDice.toString() ⇒ <code>string</code></h3><p>Return the String representation of the object.</p><p>This is called automatically when casting the object to a string.</p><p><strong>Kind</strong>: instance method of <a href="#StandardDice"><code>StandardDice</code></a><br><strong>See</strong>: <a href="#StandardDice+notation">notation</a></p>',57),n=[i];function o(c,s){return d(),a("div",null,n)}const h=e(t,[["render",o],["__file","StandardDice.html.vue"]]);export{h as default};
