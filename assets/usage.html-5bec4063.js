import{_ as u,r as i,o as d,c as k,a as n,d as s,b as o,w as a,e as l}from"./app-e7f8d9af.js";const m={},v=l('<h1 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h1><p>Read the sections below for details usage instructions.</p><p><strong>TLDR;</strong> just <a href="#examples">show me some examples</a>.</p><h2 id="rolling-dice" tabindex="-1"><a class="header-anchor" href="#rolling-dice" aria-hidden="true">#</a> Rolling dice</h2>',4),b=n("code",null,"DiceRoll",-1),g=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" DiceRoll "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@dice-roller/rpg-dice-roller'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" roll "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"DiceRoll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'4d6'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" DiceRoll "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'@dice-roller/rpg-dice-roller'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" roll "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"DiceRoll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'4d6'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" roll "),n("span",{class:"token operator"},"="),s(" rpgDiceRoller"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"DiceRoll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'4d6'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),x=n("code",null,"DiceRoll",-1),f=l(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> roll1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoll</span><span class="token punctuation">(</span><span class="token string">&#39;2d10 + 1d4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> roll2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoll</span><span class="token punctuation">(</span><span class="token string">&#39;8dF.2 - 3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="roll-totals" tabindex="-1"><a class="header-anchor" href="#roll-totals" aria-hidden="true">#</a> Roll totals</h2><p>You can get the total value of a die roll using the <code>total</code> property on the <code>DiceRoll</code> object:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> roll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoll</span><span class="token punctuation">(</span><span class="token string">&#39;4d8+1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>roll<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// e.g. 26</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="min-max-average" tabindex="-1"><a class="header-anchor" href="#min-max-average" aria-hidden="true">#</a> Min / max / average</h3><p>The <code>DiceRoll</code> object has the following properties for comparative totals:</p><ul><li><code>minTotal</code>: The minimum possible total for the notation.</li><li><code>maxTotal</code>: The maximum possible total for the notation.</li><li><code>averageTotal</code>: The average total for the notation.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> roll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">diceRoll</span><span class="token punctuation">(</span><span class="token string">&#39;4d8+1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>roll<span class="token punctuation">.</span>minTotal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>roll<span class="token punctuation">.</span>maxTotal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 33</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>roll<span class="token punctuation">.</span>averageTotal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 19</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> Output</h2><p>You can get a formatted output of the dice rolled, and the total result from the <code>output</code> property:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> roll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">diceRoll</span><span class="token punctuation">(</span><span class="token string">&#39;3d10 + 1d8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>roll<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3d10 + 1d8: [4, 9, 3]+[2] = 18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is automatically called when casting the object to a string:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You rolled: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>roll<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// You rolled: 3d10 + 1d8: [4, 9, 3]+[2] = 18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="roll-log" tabindex="-1"><a class="header-anchor" href="#roll-log" aria-hidden="true">#</a> Roll log</h2><p>If you want to keep a log of previous rolls, you can use the <code>DiceRoller</code> class instead:</p>`,15),j=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" DiceRoller "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@dice-roller/rpg-dice-roller'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" roller "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"DiceRoller"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" DiceRoller "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'@dice-roller/rpg-dice-roller'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" roller "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"DiceRoller"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" roller "),n("span",{class:"token operator"},"="),s(" rpgDiceRoller"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"DiceRoller"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),D=n("code",null,"DiceRoller",-1),_=n("h3",{id:"store",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#store","aria-hidden":"true"},"#"),s(" Store")],-1),I=n("code",null,"DiceRoller",-1),J=n("code",null,"roll()",-1),S=n("code",null,"DiceRoll",-1),T=l(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> roller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> roll1 <span class="token operator">=</span> roller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;4d6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> roll2 <span class="token operator">=</span> roller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;2d10 * 3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> roll3 <span class="token operator">=</span> roller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;4d20k1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It also accepts multiple notations at once, and will return an array of <code>DiceRoll</code> instances.</p><p>This is equivalent to the above:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> roller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> rolls <span class="token operator">=</span> roller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;4d6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2d10 * 3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4d20k1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="retrieve" tabindex="-1"><a class="header-anchor" href="#retrieve" aria-hidden="true">#</a> Retrieve</h3><p>Every time you roll on a <code>DiceRoller</code> instance, it gets stored in the <code>DiceRoller</code>&#39;s log, and can accessed like so:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> roller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
roller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;4d6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2d10 * 3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4d20k1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>roller<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// list of rolls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="empty" tabindex="-1"><a class="header-anchor" href="#empty" aria-hidden="true">#</a> Empty</h3><p>To empty a roll log, call the <code>clearLog()</code> method:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> roller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
roller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;4d6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2d10 * 3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4d20k1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>roller<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// list of rolls</span>

roller<span class="token punctuation">.</span><span class="token function">clearLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>roller<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// an empty array</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="output-1" tabindex="-1"><a class="header-anchor" href="#output-1" aria-hidden="true">#</a> Output</h3><p>To return a formatted output of the entire log, use the <code>output</code> property. It contains a semicolon separated list of the individual <a href="#output"><code>DiceRoll</code> outputs</a>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> roller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
roller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;4d6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2d10 * 3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4d20k1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>roller<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4d6: [4, 1, 4, 3] = 12; 2d10 * 3: [8, 2]*3 = 30; 4d20k1: [2d, 20, 15d, 19d] = 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is automatically called when casting the object to a string:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You rolled: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>roller<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// You rolled: 4d6: [4, 1, 4, 3] = 12; 2d10 * 3: [8, 2]*3 = 30; 4d20k1: [2d, 20, 15d, 19d] = 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="total" tabindex="-1"><a class="header-anchor" href="#total" aria-hidden="true">#</a> Total</h3><p>To retrieve the sum total of all the rolls in the log use the <code>total</code> property:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> roller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
roller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;4d6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2d10 * 3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4d20k1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>roller<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 62</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="export-rolls" tabindex="-1"><a class="header-anchor" href="#export-rolls" aria-hidden="true">#</a> Export rolls</h2>`,19),W=n("code",null,"DiceRoll",-1),F=n("code",null,"export()",-1),A=n("code",null,"ExportFormats",-1),C=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// we need to import the exportFormats object"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" DiceRoll"),n("span",{class:"token punctuation"},","),s(" exportFormats "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@dice-roller/rpg-dice-roller'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" roll "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"DiceRoll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'4d6'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

roll`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"export"),n("span",{class:"token punctuation"},"("),s("exportFormats"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"JSON"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// we need to import the exportFormats object"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" DiceRoll"),n("span",{class:"token punctuation"},","),s(" exportFormats "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'@dice-roller/rpg-dice-roller'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" roll "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"DiceRoll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'4d6'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

roll`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"export"),n("span",{class:"token punctuation"},"("),s("exportFormats"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"JSON"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Y=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// export formats is available on the global `rpgDiceRoller.exportFormats` variable"),s(`

`),n("span",{class:"token keyword"},"const"),s(" roll "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},[s("rpgDiceRoller"),n("span",{class:"token punctuation"},"."),s("DiceRoll")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'4d6'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

roll`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"export"),n("span",{class:"token punctuation"},"("),s("rpgDiceRoller"),n("span",{class:"token punctuation"},"."),s("exportFormats"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"JSON"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=l(`<h3 id="json-string-default" tabindex="-1"><a class="header-anchor" href="#json-string-default" aria-hidden="true">#</a> JSON string <em>(Default)</em></h3><p>The default output type is a JSON formatted string.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// default export as a JSON string</span>
<span class="token keyword">const</span> jsonString <span class="token operator">=</span> roll<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// equivalent to:</span>
<span class="token keyword">const</span> jsonString <span class="token operator">=</span> roll<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span>exportFormats<span class="token punctuation">.</span><span class="token constant">JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Returns stringified version of the <a href="#plain-object">plain object</a>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;{&quot;averageTotal&quot;:14,&quot;maxTotal&quot;:24,&quot;minTotal&quot;:4,&quot;notation&quot;:&quot;4d6&quot;,&quot;output&quot;:&quot;4d6: [2, 4, 2, 2] = 10&quot;,&quot;rolls&quot;:[...],&quot;total&quot;:10,&quot;type&quot;:&quot;dice-roll&quot;}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Calling <code>JSON.stringify()</code> on a <code>DiceRoll</code> instance returns the same as a JSON <code>export()</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>roll<span class="token punctuation">)</span> <span class="token operator">===</span> roll<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="plain-object" tabindex="-1"><a class="header-anchor" href="#plain-object" aria-hidden="true">#</a> Plain object</h3><p>You can export to a plain Javascript object:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jsonString <span class="token operator">=</span> roll<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span>exportFormats<span class="token punctuation">.</span><span class="token constant">OBJECT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Returns something like:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">averageTotal</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>
  <span class="token literal-property property">maxTotal</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
  <span class="token literal-property property">minTotal</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token literal-property property">notation</span><span class="token operator">:</span> <span class="token string">&#39;4d6&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&#39;4d6: [2, 4, 2, 2] = 10&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rolls</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;dice-roll&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="base64-string" tabindex="-1"><a class="header-anchor" href="#base64-string" aria-hidden="true">#</a> Base64 string</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// export as base64 encoded string</span>
<span class="token keyword">const</span> jsonString <span class="token operator">=</span> roll<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span>exportFormats<span class="token punctuation">.</span><span class="token constant">BASE_64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Returns base64 encoded version of the <a href="#json-string-default">JSON string</a>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;eyJtYXhUb3RhbCI6MjQsIm1pblRvdGFsIjo0LCJub3RhdGlvbiI6IjRkNiIsIm91dHB1dCI6IjRkNjogWzIsIDQsIDIsIDJdID0gMTAiLCJyb2xscyI6W3sicm9sbHMiOlt7ImNhbGN1bGF0aW9uVmFsdWUiOjIsImluaXRpYWxWYWx1ZSI6MiwibW9kaWZpZXJGbGFncyI6IiIsIm1vZGlmaWVycyI6W10sInR5cGUiOiJyZXN1bHQiLCJ1c2VJblRvdGFsIjp0cnVlLCJ2YWx1ZSI6Mn0seyJjYWxjdWxhdGlvblZhbHVlIjo0LCJpbml0aWFsVmFsdWUiOjQsIm1vZGlmaWVyRmxhZ3MiOiIiLCJtb2RpZmllcnMiOltdLCJ0eXBlIjoicmVzdWx0IiwidXNlSW5Ub3RhbCI6dHJ1ZSwidmFsdWUiOjR9LHsiY2FsY3VsYXRpb25WYWx1ZSI6MiwiaW5pdGlhbFZhbHVlIjoyLCJtb2RpZmllckZsYWdzIjoiIiwibW9kaWZpZXJzIjpbXSwidHlwZSI6InJlc3VsdCIsInVzZUluVG90YWwiOnRydWUsInZhbHVlIjoyfSx7ImNhbGN1bGF0aW9uVmFsdWUiOjIsImluaXRpYWxWYWx1ZSI6MiwibW9kaWZpZXJGbGFncyI6IiIsIm1vZGlmaWVycyI6W10sInR5cGUiOiJyZXN1bHQiLCJ1c2VJblRvdGFsIjp0cnVlLCJ2YWx1ZSI6Mn1dLCJ2YWx1ZSI6MTB9XSwidG90YWwiOjEwLCJ0eXBlIjoiZGljZS1yb2xsIn0=&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="exporting-logs" tabindex="-1"><a class="header-anchor" href="#exporting-logs" aria-hidden="true">#</a> Exporting logs</h2>`,16),q=n("code",null,"DiceRoller",-1),Z=n("code",null,"export()",-1),M=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" DiceRoller"),n("span",{class:"token punctuation"},","),s(" exportFormats "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@dice-roller/rpg-dice-roller'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" roller "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"DiceRoller"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
roller`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"roll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'4d6'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
roller`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"roll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'2d10'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

roller`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"export"),n("span",{class:"token punctuation"},"("),s("exportFormats"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"JSON"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" DiceRoller"),n("span",{class:"token punctuation"},","),s(" exportFormats "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'@dice-roller/rpg-dice-roller'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" roller "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"DiceRoller"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
roller`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"roll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'4d6'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
roller`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"roll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'2d10'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

roller`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"export"),n("span",{class:"token punctuation"},"("),s("exportFormats"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"JSON"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" roller "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},[s("rpgDiceRoller"),n("span",{class:"token punctuation"},"."),s("DiceRoller")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

roller`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"roll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'4d6'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
roller`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"roll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'2d10'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

roller`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"export"),n("span",{class:"token punctuation"},"("),s("exportFormats"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"JSON"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),G=l(`<p>The plain object export returns something like this:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">averageTotal</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>
      <span class="token literal-property property">maxTotal</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
      <span class="token literal-property property">minTotal</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
      <span class="token literal-property property">notation</span><span class="token operator">:</span> <span class="token string">&#39;4d6&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&#39;4d6: [2, 4, 2, 2] = 10&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">rolls</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;dice-roll&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">averageTotal</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
      <span class="token literal-property property">maxTotal</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
      <span class="token literal-property property">minTotal</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token literal-property property">notation</span><span class="token operator">:</span> <span class="token string">&#39;2d10&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&#39;2d10: [8, 7] = 15&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">rolls</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;dice-roll&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&#39;4d6: [2, 4, 2, 2] = 10&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;dice-roller&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="import-rolls" tabindex="-1"><a class="header-anchor" href="#import-rolls" aria-hidden="true">#</a> Import rolls</h2><p>Importing rolls is handy if you need to be able to retrieve rolls from a database, share them across environments etc.</p><p>Both <code>DiceRoll</code> and <code>DiceRoller</code> classes have a static <code>import()</code> method that can import form any of the exported formats <a href="#export-rolls">listed above</a>:</p><h3 id="from-exported-rolls" tabindex="-1"><a class="header-anchor" href="#from-exported-rolls" aria-hidden="true">#</a> From exported rolls</h3><h4 id="diceroll" tabindex="-1"><a class="header-anchor" href="#diceroll" aria-hidden="true">#</a> DiceRoll</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// create a \`DiceRoll\`</span>
<span class="token keyword">const</span> roll1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoll</span><span class="token punctuation">(</span><span class="token string">&#39;4d6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// export as JSON</span>
<span class="token keyword">let</span> exportedRolls <span class="token operator">=</span> roll<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// import the data into a new DiceRoll instance</span>
<span class="token keyword">const</span> roll2 <span class="token operator">=</span> DiceRoll<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span>exportedRolls<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// export the rolls as Base64</span>
<span class="token keyword">let</span> exportedRolls <span class="token operator">=</span> roll<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span>exportFormats<span class="token punctuation">.</span><span class="token constant">BASE_64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// import the data into a new DiceRoll instance</span>
<span class="token keyword">const</span> roll3 <span class="token operator">=</span> DiceRoll<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span>exportedRolls<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="diceroller" tabindex="-1"><a class="header-anchor" href="#diceroller" aria-hidden="true">#</a> DiceRoller</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// create a \`DiceRoller\` and roll some dice</span>
<span class="token keyword">const</span> roller1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
roller1<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;4d6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// export as JSON</span>
<span class="token keyword">let</span> exportedRolls <span class="token operator">=</span> roll<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// import the data into a new \`DiceRoller\` instance</span>
<span class="token keyword">const</span> roller2 <span class="token operator">=</span> DiceRoller<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span>exportedRolls<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// export as Base64</span>
<span class="token keyword">let</span> exportedRolls <span class="token operator">=</span> roll<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// import the data into a new \`DiceRoller\` instance</span>
<span class="token keyword">const</span> roller3 <span class="token operator">=</span> DiceRoller<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span>exportedRolls<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="manually-build-import-data" tabindex="-1"><a class="header-anchor" href="#manually-build-import-data" aria-hidden="true">#</a> Manually build import data</h3><p>You can also build your own data to import, provided that it&#39;s formatted correctly.</p><p>At it&#39;s simplest, the <code>DiceRoll</code> import expects an object that contains a string notation, and an array of roll value results:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">notation</span><span class="token operator">:</span> <span class="token string">&#39;4d6&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// the values rolled</span>
  <span class="token literal-property property">rolls</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> roll <span class="token operator">=</span> DiceRoll<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>DiceRoller</code> expects an object that contains a <code>log</code> property. The <code>log</code> property must be an array of data that is correctly formatted to be imported into a <code>DiceRoll</code> object, as in the example above:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">notation</span><span class="token operator">:</span> <span class="token string">&#39;4d6&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">rolls</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// create a \`DiceRoll\` and export as JSON</span>
<span class="token keyword">const</span> roll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoll</span><span class="token punctuation">(</span><span class="token string">&#39;4d6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> exportedRolls <span class="token operator">=</span> roll<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// import the data into a new \`DiceRoller\` instance</span>
<span class="token keyword">const</span> roller <span class="token operator">=</span> DiceRoller<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token punctuation">[</span> exportedRolls <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import-to-existing-roll-log" tabindex="-1"><a class="header-anchor" href="#import-to-existing-roll-log" aria-hidden="true">#</a> Import to existing roll log</h3><p>You can also import rolls into an existing <code>DiceRoller</code> instance, to append rolls to an existing log:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// create a \`DiceRoller\` and roll some dice</span>
<span class="token keyword">const</span> roller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
roller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;4d6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// create a \`DiceRoll\` and export as JSON</span>
<span class="token keyword">const</span> roll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoll</span><span class="token punctuation">(</span><span class="token string">&#39;2d10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> exportedRolls <span class="token operator">=</span> roll<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// append the rolls to the existing roll log</span>
<span class="token keyword">const</span> roller <span class="token operator">=</span> roller<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token punctuation">[</span> exportedRolls <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// create a \`DiceRoller\` instance that keeps a log of previous rolls</span>
<span class="token keyword">const</span> roller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// roll a notation</span>
<span class="token keyword">let</span> roll <span class="token operator">=</span> roller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;4d20&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// output the roll</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You rolled: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>roll<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// You rolled: 4d20: [4, 18, 15, 11] = 48</span>

<span class="token comment">// roll several notations all at once, and append them to the log</span>
<span class="token keyword">const</span> rolls <span class="token operator">=</span> roller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;1d6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2d4dh1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5d10!!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// output all of the rolls from the log</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You rolled: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>roller<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// You rolled: 4d20: [4, 18, 15, 11] = 48; 1d6: [3] = 3; 2d4dh1: [3d, 1] = 1; 5d10!! = [3, 2, 16!!, 3, 9] = 33</span>

<span class="token comment">// get the sum of all the rolls in the log:</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Log total: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>roller<span class="token punctuation">.</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Log total: 85</span>

<span class="token comment">// empty the roll log</span>
roller<span class="token punctuation">.</span><span class="token function">clearLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// output the empty log</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Looks empty: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>roller<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Looks empty: </span>


<span class="token comment">// If you don&#39;t need to keep a roll log, you can use a \`DiceRoll, instead of \`DiceRoller\`</span>
roll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoll</span><span class="token punctuation">(</span><span class="token string">&#39;4d10*3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// output the roll</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You rolled: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>roll<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// You rolled: 4d10*3: [8, 3, 4, 6]*3 = 63</span>

<span class="token comment">// get the roll total:</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Roll total: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>roll<span class="token punctuation">.</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Roll total: 63</span>

<span class="token comment">// get the minimum possible total:</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Min total: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>roll<span class="token punctuation">.</span>minTotal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Min total: 12</span>

<span class="token comment">// get the maximum possible total:</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Max total: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>roll<span class="token punctuation">.</span>minTotal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Max total: 120</span>

<span class="token comment">// get the average total:</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Average total: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>roll<span class="token punctuation">.</span>averageTotal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Average total: 66</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="try-it-yourself" tabindex="-1"><a class="header-anchor" href="#try-it-yourself" aria-hidden="true">#</a> Try it yourself</h2>`,23);function V(E,X){const p=i("RouterLink"),c=i("CodeTabs"),r=i("DiceRoller");return d(),k("div",null,[v,n("p",null,[s("Dice are rolled with a string "),o(p,{to:"/guide/notation/"},{default:a(()=>[s("notation")]),_:1}),s(". The quickest method is using the "),b,s(" class:")]),o(c,{id:"15",data:[{id:"ESM"},{id:"CommonJS"},{id:"Browser"}],"tab-id":"module-type"},{title0:a(({value:t,isActive:e})=>[s("ESM")]),title1:a(({value:t,isActive:e})=>[s("CommonJS")]),title2:a(({value:t,isActive:e})=>[s("Browser")]),tab0:a(({value:t,isActive:e})=>[g]),tab1:a(({value:t,isActive:e})=>[h]),tab2:a(({value:t,isActive:e})=>[y]),_:1}),n("p",null,[s("The above will parse the "),o(p,{to:"/guide/notation/"},{default:a(()=>[s("notation")]),_:1}),s(", roll the dice, and store the result.")]),n("p",null,[s("If you want to roll another "),o(p,{to:"/guide/notation/"},{default:a(()=>[s("notation")]),_:1}),s(", you can create another "),x,s(" instance:")]),f,o(c,{id:"81",data:[{id:"ESM"},{id:"CommonJS"},{id:"Browser"}],"tab-id":"module-type"},{title0:a(({value:t,isActive:e})=>[s("ESM")]),title1:a(({value:t,isActive:e})=>[s("CommonJS")]),title2:a(({value:t,isActive:e})=>[s("Browser")]),tab0:a(({value:t,isActive:e})=>[j]),tab1:a(({value:t,isActive:e})=>[w]),tab2:a(({value:t,isActive:e})=>[R]),_:1}),n("p",null,[s("Any "),o(p,{to:"/guide/notation/"},{default:a(()=>[s("notations")]),_:1}),s(" rolled on a "),D,s(" instance get stored in its log.")]),_,n("p",null,[s("The "),I,s(" has a "),J,s(" method, that takes a string "),o(p,{to:"/guide/notation/"},{default:a(()=>[s("notation")]),_:1}),s(", and returns a single "),S,s(" object:")]),T,n("p",null,[s("The "),W,s(" class has an "),F,s(" method, which can export the rolls in several formats, as defined in the "),o(p,{to:"/api/utilities/ExportFormats.html"},{default:a(()=>[A,s(" utility object")]),_:1}),s(".")]),o(c,{id:"147",data:[{id:"ESM"},{id:"CommonJs"},{id:"Browser"}],"tab-id":"module-type"},{title0:a(({value:t,isActive:e})=>[s("ESM")]),title1:a(({value:t,isActive:e})=>[s("CommonJs")]),title2:a(({value:t,isActive:e})=>[s("Browser")]),tab0:a(({value:t,isActive:e})=>[C]),tab1:a(({value:t,isActive:e})=>[O]),tab2:a(({value:t,isActive:e})=>[Y]),_:1}),N,n("p",null,[s("You can also export the data from a "),q,s(" instance, in exactly the same way. It also has an "),Z,s(" method, that accepts the same "),o(p,{to:"/api/utilities/ExportFormats.html"},{default:a(()=>[s("export formats")]),_:1}),s(".")]),o(c,{id:"200",data:[{id:"ESM"},{id:"CommonJs"},{id:"Browser"}],"tab-id":"module-type"},{title0:a(({value:t,isActive:e})=>[s("ESM")]),title1:a(({value:t,isActive:e})=>[s("CommonJs")]),title2:a(({value:t,isActive:e})=>[s("Browser")]),tab0:a(({value:t,isActive:e})=>[M]),tab1:a(({value:t,isActive:e})=>[L]),tab2:a(({value:t,isActive:e})=>[B]),_:1}),G,o(r,{notation:""}),n("p",null,[s("Check the "),o(p,{to:"/guide/notation/"},{default:a(()=>[s("notation")]),_:1}),s(" section for more examples.")]),n("p",null,[s("Check the "),o(p,{to:"/api/"},{default:a(()=>[s("API")]),_:1}),s(" section for more details on using the dice roller.")])])}const $=u(m,[["render",V],["__file","usage.html.vue"]]);export{$ as default};
