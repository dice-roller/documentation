import{_ as e,o as t,c as r,e as a}from"./app-e7f8d9af.js";const o={},i=a('<h1 id="targetmodifier" tabindex="-1"><a class="header-anchor" href="#targetmodifier" aria-hidden="true">#</a> TargetModifier</h1><p><a name="TargetModifier"></a></p><h2 id="targetmodifier-⇐-comparisonmodifier" tabindex="-1"><a class="header-anchor" href="#targetmodifier-⇐-comparisonmodifier" aria-hidden="true">#</a> TargetModifier ⇐ <code>ComparisonModifier</code></h2><p>A <code>TargetModifier</code> determines whether rolls are classed as a success, failure, or neutral.</p><p>This modifies the roll values, depending on the state;</p><p>success = <code>1</code>, failure = <code>-1</code>, neutral = <code>0</code>.</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>ComparisonModifier</code></p><ul><li><a href="#TargetModifier">TargetModifier</a> ⇐ <code>ComparisonModifier</code><ul><li><a href="#new_TargetModifier_new">new TargetModifier(successCP, [failureCP])</a></li><li><a href="#TargetModifier+order">.order</a> : <code>number</code></li><li><a href="#TargetModifier+failureComparePoint">.failureComparePoint</a> ⇒ <code>ComparePoint</code> | <code>null</code></li><li><a href="#TargetModifier+failureComparePoint">.failureComparePoint</a></li><li><a href="#TargetModifier+name">.name</a> ⇒ <code>string</code></li><li><a href="#TargetModifier+notation">.notation</a> ⇒ <code>string</code></li><li><a href="#TargetModifier+successComparePoint">.successComparePoint</a> ⇒ <code>ComparePoint</code></li><li><a href="#TargetModifier+successComparePoint">.successComparePoint</a></li><li><a href="#TargetModifier+getStateValue">.getStateValue(value)</a> ⇒ <code>number</code></li><li><a href="#TargetModifier+isFailure">.isFailure(value)</a> ⇒ <code>boolean</code></li><li><a href="#TargetModifier+isNeutral">.isNeutral(value)</a> ⇒ <code>boolean</code></li><li><a href="#TargetModifier+isSuccess">.isSuccess(value)</a> ⇒ <code>boolean</code></li><li><a href="#TargetModifier+run">.run(results, _context)</a> ⇒ <code>RollResults</code></li><li><a href="#TargetModifier+toJSON">.toJSON()</a> ⇒ <code>Object</code></li></ul></li></ul><p><a name="new_TargetModifier_new"></a></p><h3 id="new-targetmodifier-successcp-failurecp" tabindex="-1"><a class="header-anchor" href="#new-targetmodifier-successcp-failurecp" aria-hidden="true">#</a> new TargetModifier(successCP, [failureCP])</h3><p>Create a <code>TargetModifier</code> instance.</p><p><strong>Throws</strong>:</p><ul><li><code>TypeError</code> failure comparePoint must be instance of ComparePoint or null</li></ul><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>successCP</td><td><code>ComparePoint</code></td><td></td><td>The success comparison object</td></tr><tr><td>[failureCP]</td><td><code>ComparePoint</code></td><td><code></code></td><td>The failure comparison object</td></tr></tbody></table><p><a name="TargetModifier+order"></a></p><h3 id="targetmodifier-order-number" tabindex="-1"><a class="header-anchor" href="#targetmodifier-order-number" aria-hidden="true">#</a> targetModifier.order : <code>number</code></h3><p>The default modifier execution order.</p><p><strong>Kind</strong>: instance property of <a href="#TargetModifier"><code>TargetModifier</code></a><br><a name="TargetModifier+failureComparePoint"></a></p><h3 id="targetmodifier-failurecomparepoint-⇒-comparepoint-null" tabindex="-1"><a class="header-anchor" href="#targetmodifier-failurecomparepoint-⇒-comparepoint-null" aria-hidden="true">#</a> targetModifier.failureComparePoint ⇒ <code>ComparePoint</code> | <code>null</code></h3><p>The failure compare point for the modifier</p><p><strong>Kind</strong>: instance property of <a href="#TargetModifier"><code>TargetModifier</code></a><br><a name="TargetModifier+failureComparePoint"></a></p><h3 id="targetmodifier-failurecomparepoint" tabindex="-1"><a class="header-anchor" href="#targetmodifier-failurecomparepoint" aria-hidden="true">#</a> targetModifier.failureComparePoint</h3><p>Set the failure compare point</p><p><strong>Kind</strong>: instance property of <a href="#TargetModifier"><code>TargetModifier</code></a><br><strong>Throws</strong>:</p><ul><li><code>TypeError</code> failure comparePoint must be instance of ComparePoint or null</li></ul><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>comparePoint</td><td><code>ComparePoint</code> | <code>null</code></td></tr></tbody></table><p><a name="TargetModifier+name"></a></p><h3 id="targetmodifier-name-⇒-string" tabindex="-1"><a class="header-anchor" href="#targetmodifier-name-⇒-string" aria-hidden="true">#</a> targetModifier.name ⇒ <code>string</code></h3><p>The name of the modifier.</p><p><strong>Kind</strong>: instance property of <a href="#TargetModifier"><code>TargetModifier</code></a><br><strong>Returns</strong>: <code>string</code> - &#39;target&#39;<br><a name="TargetModifier+notation"></a></p><h3 id="targetmodifier-notation-⇒-string" tabindex="-1"><a class="header-anchor" href="#targetmodifier-notation-⇒-string" aria-hidden="true">#</a> targetModifier.notation ⇒ <code>string</code></h3><p>The modifier&#39;s notation.</p><p><strong>Kind</strong>: instance property of <a href="#TargetModifier"><code>TargetModifier</code></a><br><a name="TargetModifier+successComparePoint"></a></p><h3 id="targetmodifier-successcomparepoint-⇒-comparepoint" tabindex="-1"><a class="header-anchor" href="#targetmodifier-successcomparepoint-⇒-comparepoint" aria-hidden="true">#</a> targetModifier.successComparePoint ⇒ <code>ComparePoint</code></h3><p>The success compare point for the modifier</p><p><strong>Kind</strong>: instance property of <a href="#TargetModifier"><code>TargetModifier</code></a><br><a name="TargetModifier+successComparePoint"></a></p><h3 id="targetmodifier-successcomparepoint" tabindex="-1"><a class="header-anchor" href="#targetmodifier-successcomparepoint" aria-hidden="true">#</a> targetModifier.successComparePoint</h3><p>Set the success compare point for the modifier</p><p><strong>Kind</strong>: instance property of <a href="#TargetModifier"><code>TargetModifier</code></a></p><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><code>ComparePoint</code></td></tr></tbody></table><p><a name="TargetModifier+getStateValue"></a></p><h3 id="targetmodifier-getstatevalue-value-⇒-number" tabindex="-1"><a class="header-anchor" href="#targetmodifier-getstatevalue-value-⇒-number" aria-hidden="true">#</a> targetModifier.getStateValue(value) ⇒ <code>number</code></h3><p>Check if the value is a success/failure/neither and return the corresponding state value.</p><p><strong>Kind</strong>: instance method of <a href="#TargetModifier"><code>TargetModifier</code></a><br><strong>Returns</strong>: <code>number</code> - success = <code>1</code>, failure = <code>-1</code>, neutral = <code>0</code></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>value</td><td><code>number</code></td><td>The number to compare against</td></tr></tbody></table><p><a name="TargetModifier+isFailure"></a></p><h3 id="targetmodifier-isfailure-value-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#targetmodifier-isfailure-value-⇒-boolean" aria-hidden="true">#</a> targetModifier.isFailure(value) ⇒ <code>boolean</code></h3><p>Check if the <code>value</code> matches the failure compare point.</p><p>A response of <code>false</code> does <em>NOT</em> indicate a success. A value is a success <em>ONLY</em> if it passes the success compare point. A value could be neither a failure nor a success.</p><p><strong>Kind</strong>: instance method of <a href="#TargetModifier"><code>TargetModifier</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>value</td><td><code>number</code></td><td>The number to compare against</td></tr></tbody></table><p><a name="TargetModifier+isNeutral"></a></p><h3 id="targetmodifier-isneutral-value-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#targetmodifier-isneutral-value-⇒-boolean" aria-hidden="true">#</a> targetModifier.isNeutral(value) ⇒ <code>boolean</code></h3><p>Check if the <code>value</code> is neither a success nor a failure.</p><p><strong>Kind</strong>: instance method of <a href="#TargetModifier"><code>TargetModifier</code></a><br><strong>Returns</strong>: <code>boolean</code> - <code>true</code> if the value doesn&#39;t match the success and failure compare points</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>value</td><td><code>number</code></td><td>The number to compare against</td></tr></tbody></table><p><a name="TargetModifier+isSuccess"></a></p><h3 id="targetmodifier-issuccess-value-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#targetmodifier-issuccess-value-⇒-boolean" aria-hidden="true">#</a> targetModifier.isSuccess(value) ⇒ <code>boolean</code></h3><p>Check if the <code>value</code> matches the success compare point.</p><p>A response of <code>false</code> does <em>NOT</em> indicate a failure. A value is a failure <em>ONLY</em> if it passes the failure compare point. A value could be neither a failure nor a success.</p><p><strong>Kind</strong>: instance method of <a href="#TargetModifier"><code>TargetModifier</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>value</td><td><code>number</code></td><td>The number to compare against</td></tr></tbody></table><p><a name="TargetModifier+run"></a></p><h3 id="targetmodifier-run-results-context-⇒-rollresults" tabindex="-1"><a class="header-anchor" href="#targetmodifier-run-results-context-⇒-rollresults" aria-hidden="true">#</a> targetModifier.run(results, _context) ⇒ <code>RollResults</code></h3><p>Run the modifier on the results.</p><p><strong>Kind</strong>: instance method of <a href="#TargetModifier"><code>TargetModifier</code></a><br><strong>Returns</strong>: <code>RollResults</code> - The modified results</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>results</td><td><code>RollResults</code></td><td>The results to run the modifier against</td></tr><tr><td>_context</td><td><code>StandardDice</code> | <code>RollGroup</code></td><td>The object that the modifier is attached to</td></tr></tbody></table><p><a name="TargetModifier+toJSON"></a></p><h3 id="targetmodifier-tojson-⇒-object" tabindex="-1"><a class="header-anchor" href="#targetmodifier-tojson-⇒-object" aria-hidden="true">#</a> targetModifier.toJSON() ⇒ <code>Object</code></h3><p>Return an object for JSON serialising.</p><p>This is called automatically when JSON encoding the object.</p><p><strong>Kind</strong>: instance method of <a href="#TargetModifier"><code>TargetModifier</code></a></p>',72),d=[i];function c(n,s){return t(),r("div",null,d)}const f=e(o,[["render",c],["__file","TargetModifier.html.vue"]]);export{f as default};
