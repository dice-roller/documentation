import{_ as e,o,c as i,e as r}from"./app-e7f8d9af.js";const n={},d=r('<h1 id="uniquemodifier" tabindex="-1"><a class="header-anchor" href="#uniquemodifier" aria-hidden="true">#</a> UniqueModifier</h1><p><a name="UniqueModifier"></a></p><h2 id="uniquemodifier-⇐-comparisonmodifier" tabindex="-1"><a class="header-anchor" href="#uniquemodifier-⇐-comparisonmodifier" aria-hidden="true">#</a> UniqueModifier ⇐ <code>ComparisonModifier</code></h2><p>A <code>UniqueModifier</code> re-rolls any non-unique dice values and, optionally that match a given test.</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>ComparisonModifier</code></p><ul><li><a href="#UniqueModifier">UniqueModifier</a> ⇐ <code>ComparisonModifier</code><ul><li><a href="#new_UniqueModifier_new">new UniqueModifier([once], [comparePoint])</a></li><li><a href="#UniqueModifier+order">.order</a> : <code>number</code></li><li><a href="#UniqueModifier+name">.name</a> ⇒ <code>string</code></li><li><a href="#UniqueModifier+notation">.notation</a> ⇒ <code>string</code></li><li><a href="#UniqueModifier+once">.once</a> ⇒ <code>boolean</code></li><li><a href="#UniqueModifier+once">.once</a></li><li><a href="#UniqueModifier+run">.run(results, _context)</a> ⇒ <code>RollResults</code></li><li><a href="#UniqueModifier+toJSON">.toJSON()</a> ⇒ <code>Object</code></li></ul></li></ul><p><a name="new_UniqueModifier_new"></a></p><h3 id="new-uniquemodifier-once-comparepoint" tabindex="-1"><a class="header-anchor" href="#new-uniquemodifier-once-comparepoint" aria-hidden="true">#</a> new UniqueModifier([once], [comparePoint])</h3><p>Create a <code>UniqueModifier</code> instance.</p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>[once]</td><td><code>boolean</code></td><td><code>false</code></td><td>Whether to only re-roll once or not</td></tr><tr><td>[comparePoint]</td><td><code>ComparePoint</code></td><td><code></code></td><td>The comparison object</td></tr></tbody></table><p><a name="UniqueModifier+order"></a></p><h3 id="uniquemodifier-order-number" tabindex="-1"><a class="header-anchor" href="#uniquemodifier-order-number" aria-hidden="true">#</a> uniqueModifier.order : <code>number</code></h3><p>The default modifier execution order.</p><p><strong>Kind</strong>: instance property of <a href="#UniqueModifier"><code>UniqueModifier</code></a><br><a name="UniqueModifier+name"></a></p><h3 id="uniquemodifier-name-⇒-string" tabindex="-1"><a class="header-anchor" href="#uniquemodifier-name-⇒-string" aria-hidden="true">#</a> uniqueModifier.name ⇒ <code>string</code></h3><p>The name of the modifier.</p><p><strong>Kind</strong>: instance property of <a href="#UniqueModifier"><code>UniqueModifier</code></a><br><strong>Returns</strong>: <code>string</code> - &#39;unique&#39;<br><a name="UniqueModifier+notation"></a></p><h3 id="uniquemodifier-notation-⇒-string" tabindex="-1"><a class="header-anchor" href="#uniquemodifier-notation-⇒-string" aria-hidden="true">#</a> uniqueModifier.notation ⇒ <code>string</code></h3><p>The modifier&#39;s notation.</p><p><strong>Kind</strong>: instance property of <a href="#UniqueModifier"><code>UniqueModifier</code></a><br><a name="UniqueModifier+once"></a></p><h3 id="uniquemodifier-once-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#uniquemodifier-once-⇒-boolean" aria-hidden="true">#</a> uniqueModifier.once ⇒ <code>boolean</code></h3><p>Whether the modifier should only re-roll once or not.</p><p><strong>Kind</strong>: instance property of <a href="#UniqueModifier"><code>UniqueModifier</code></a><br><strong>Returns</strong>: <code>boolean</code> - <code>true</code> if it should re-roll once, <code>false</code> otherwise<br><a name="UniqueModifier+once"></a></p><h3 id="uniquemodifier-once" tabindex="-1"><a class="header-anchor" href="#uniquemodifier-once" aria-hidden="true">#</a> uniqueModifier.once</h3><p>Set whether the modifier should only re-roll once or not.</p><p><strong>Kind</strong>: instance property of <a href="#UniqueModifier"><code>UniqueModifier</code></a></p><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><code>boolean</code></td></tr></tbody></table><p><a name="UniqueModifier+run"></a></p><h3 id="uniquemodifier-run-results-context-⇒-rollresults" tabindex="-1"><a class="header-anchor" href="#uniquemodifier-run-results-context-⇒-rollresults" aria-hidden="true">#</a> uniqueModifier.run(results, _context) ⇒ <code>RollResults</code></h3><p>Run the modifier on the results.</p><p><strong>Kind</strong>: instance method of <a href="#UniqueModifier"><code>UniqueModifier</code></a><br><strong>Returns</strong>: <code>RollResults</code> - The modified results</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>results</td><td><code>RollResults</code></td><td>The results to run the modifier against</td></tr><tr><td>_context</td><td><code>StandardDice</code> | <code>RollGroup</code></td><td>The object that the modifier is attached to</td></tr></tbody></table><p><a name="UniqueModifier+toJSON"></a></p><h3 id="uniquemodifier-tojson-⇒-object" tabindex="-1"><a class="header-anchor" href="#uniquemodifier-tojson-⇒-object" aria-hidden="true">#</a> uniqueModifier.toJSON() ⇒ <code>Object</code></h3><p>Return an object for JSON serialising.</p><p>This is called automatically when JSON encoding the object.</p><p><strong>Kind</strong>: instance method of <a href="#UniqueModifier"><code>UniqueModifier</code></a></p>',37),t=[d];function a(c,u){return o(),i("div",null,t)}const s=e(n,[["render",a],["__file","UniqueModifier.html.vue"]]);export{s as default};
