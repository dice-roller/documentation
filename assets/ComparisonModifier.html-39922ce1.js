import{_ as o,o as e,c as i,e as r}from"./app-e7f8d9af.js";const a={},t=r('<h1 id="comparisonmodifier" tabindex="-1"><a class="header-anchor" href="#comparisonmodifier" aria-hidden="true">#</a> ComparisonModifier</h1><p><a name="ComparisonModifier"></a></p><h2 id="comparisonmodifier-⇐-modifier" tabindex="-1"><a class="header-anchor" href="#comparisonmodifier-⇐-modifier" aria-hidden="true">#</a> <em>ComparisonModifier ⇐ <code>Modifier</code></em></h2><div class="custom-container warning"><p class="custom-container-title">Abstract class</p><p>This is an abstract class and should not be used directly. You should use one of the extended classes, or extend the class yourself.</p></div><p>A <code>ComparisonModifier</code> is the base modifier class for comparing values.</p><p><strong>Kind</strong>: global abstract class<br><strong>Extends</strong>: <code>Modifier</code><br><strong>See</strong></p><ul><li><a href="CriticalFailureModifier">CriticalFailureModifier</a></li><li><a href="CriticalSuccessModifier">CriticalSuccessModifier</a></li><li><a href="ExplodeModifier">ExplodeModifier</a></li><li><a href="ReRollModifier">ReRollModifier</a></li><li><a href="TargetModifier">TargetModifier</a></li></ul><ul><li><em><a href="#ComparisonModifier">ComparisonModifier</a> ⇐ <code>Modifier</code></em><ul><li><em><a href="#new_ComparisonModifier_new">new ComparisonModifier([comparePoint])</a></em></li><li><em><a href="#ComparisonModifier+comparePoint">.comparePoint</a> ⇒ <code>ComparePoint</code> | <code>undefined</code></em></li><li><em><a href="#ComparisonModifier+comparePoint">.comparePoint</a></em></li><li><em><a href="#ComparisonModifier+name">.name</a> ⇒ <code>string</code></em></li><li><em><a href="#ComparisonModifier+notation">.notation</a> ⇒ <code>string</code></em></li><li><em><a href="#ComparisonModifier+defaultComparePoint">.defaultComparePoint(_context)</a> ⇒ <code>null</code></em></li><li><em><a href="#ComparisonModifier+defaults">.defaults(_context)</a> ⇒ <code>object</code></em></li><li><em><a href="#ComparisonModifier+isComparePoint">.isComparePoint(value)</a> ⇒ <code>boolean</code></em></li><li><em><a href="#ComparisonModifier+toJSON">.toJSON()</a> ⇒ <code>Object</code></em></li></ul></li></ul><p><a name="new_ComparisonModifier_new"></a></p><h3 id="new-comparisonmodifier-comparepoint" tabindex="-1"><a class="header-anchor" href="#new-comparisonmodifier-comparepoint" aria-hidden="true">#</a> <em>new ComparisonModifier([comparePoint])</em></h3><p>Create a <code>ComparisonModifier</code> instance.</p><p><strong>Throws</strong>:</p><ul><li><code>TypeError</code> <code>comparePoint</code> must be an instance of <code>ComparePoint</code> or <code>undefined</code></li></ul><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>[comparePoint]</td><td><code>ComparePoint</code></td><td>The comparison object</td></tr></tbody></table><p><a name="ComparisonModifier+comparePoint"></a></p><h3 id="comparisonmodifier-comparepoint-⇒-comparepoint-undefined" tabindex="-1"><a class="header-anchor" href="#comparisonmodifier-comparepoint-⇒-comparepoint-undefined" aria-hidden="true">#</a> <em>comparisonModifier.comparePoint ⇒ <code>ComparePoint</code> | <code>undefined</code></em></h3><p>The compare point.</p><p><strong>Kind</strong>: instance property of <a href="#ComparisonModifier"><code>ComparisonModifier</code></a><br><a name="ComparisonModifier+comparePoint"></a></p><h3 id="comparisonmodifier-comparepoint" tabindex="-1"><a class="header-anchor" href="#comparisonmodifier-comparepoint" aria-hidden="true">#</a> <em>comparisonModifier.comparePoint</em></h3><p>Set the compare point.</p><p><strong>Kind</strong>: instance property of <a href="#ComparisonModifier"><code>ComparisonModifier</code></a><br><strong>Throws</strong>:</p><ul><li><code>TypeError</code> value must be an instance of <code>ComparePoint</code></li></ul><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>comparePoint</td><td><code>ComparePoint</code></td></tr></tbody></table><p><a name="ComparisonModifier+name"></a></p><h3 id="comparisonmodifier-name-⇒-string" tabindex="-1"><a class="header-anchor" href="#comparisonmodifier-name-⇒-string" aria-hidden="true">#</a> <em>comparisonModifier.name ⇒ <code>string</code></em></h3><p>The name of the modifier.</p><p><strong>Kind</strong>: instance property of <a href="#ComparisonModifier"><code>ComparisonModifier</code></a><br><strong>Returns</strong>: <code>string</code> - &#39;comparison&#39;<br><a name="ComparisonModifier+notation"></a></p><h3 id="comparisonmodifier-notation-⇒-string" tabindex="-1"><a class="header-anchor" href="#comparisonmodifier-notation-⇒-string" aria-hidden="true">#</a> <em>comparisonModifier.notation ⇒ <code>string</code></em></h3><p>The modifier&#39;s notation.</p><p><strong>Kind</strong>: instance property of <a href="#ComparisonModifier"><code>ComparisonModifier</code></a><br><a name="ComparisonModifier+defaultComparePoint"></a></p><h3 id="comparisonmodifier-defaultcomparepoint-context-⇒-null" tabindex="-1"><a class="header-anchor" href="#comparisonmodifier-defaultcomparepoint-context-⇒-null" aria-hidden="true">#</a> <em>comparisonModifier.defaultComparePoint(_context) ⇒ <code>null</code></em></h3><p>Empty default compare point definition</p><p><strong>Kind</strong>: instance method of <a href="#ComparisonModifier"><code>ComparisonModifier</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_context</td><td><code>StandardDice</code> | <code>RollGroup</code></td><td>The object that the modifier is attached to</td></tr></tbody></table><p><a name="ComparisonModifier+defaults"></a></p><h3 id="comparisonmodifier-defaults-context-⇒-object" tabindex="-1"><a class="header-anchor" href="#comparisonmodifier-defaults-context-⇒-object" aria-hidden="true">#</a> <em>comparisonModifier.defaults(_context) ⇒ <code>object</code></em></h3><p>Eases processing of simple &quot;compare point only&quot; defaults</p><p><strong>Kind</strong>: instance method of <a href="#ComparisonModifier"><code>ComparisonModifier</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_context</td><td><code>StandardDice</code> | <code>RollGroup</code></td><td>The object that the modifier is attached to</td></tr></tbody></table><p><a name="ComparisonModifier+isComparePoint"></a></p><h3 id="comparisonmodifier-iscomparepoint-value-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#comparisonmodifier-iscomparepoint-value-⇒-boolean" aria-hidden="true">#</a> <em>comparisonModifier.isComparePoint(value) ⇒ <code>boolean</code></em></h3><p>Check whether value matches the compare point or not.</p><p><strong>Kind</strong>: instance method of <a href="#ComparisonModifier"><code>ComparisonModifier</code></a><br><strong>Returns</strong>: <code>boolean</code> - <code>true</code> if the value matches, <code>false</code> otherwise</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>value</td><td><code>number</code></td><td>The value to compare with</td></tr></tbody></table><p><a name="ComparisonModifier+toJSON"></a></p><h3 id="comparisonmodifier-tojson-⇒-object" tabindex="-1"><a class="header-anchor" href="#comparisonmodifier-tojson-⇒-object" aria-hidden="true">#</a> <em>comparisonModifier.toJSON() ⇒ <code>Object</code></em></h3><p>Return an object for JSON serialising.</p><p>This is called automatically when JSON encoding the object.</p><p><strong>Kind</strong>: instance method of <a href="#ComparisonModifier"><code>ComparisonModifier</code></a></p>',49),d=[t];function n(c,s){return e(),i("div",null,d)}const p=o(a,[["render",n],["__file","ComparisonModifier.html.vue"]]);export{p as default};
