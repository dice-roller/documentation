import{_ as e,o,c as a,e as t}from"./app-e7f8d9af.js";const n={},l=t(`<h1 id="diceroll" tabindex="-1"><a class="header-anchor" href="#diceroll" aria-hidden="true">#</a> DiceRoll</h1><p><a name="DiceRoll"></a></p><h2 id="diceroll-1" tabindex="-1"><a class="header-anchor" href="#diceroll-1" aria-hidden="true">#</a> DiceRoll</h2><p>A <code>DiceRoll</code> handles rolling of a single dice notation and storing the result.</p><p><strong>Kind</strong>: global class<br><strong>See</strong>: <a href="DiceRoller">DiceRoller</a> if you need to keep a history of rolls</p><ul><li><a href="#DiceRoll">DiceRoll</a><ul><li><a href="#new_DiceRoll_new">new DiceRoll(notation)</a></li><li><em>instance</em><ul><li><a href="#DiceRoll+averageTotal">.averageTotal</a> ⇒ <code>number</code></li><li><a href="#DiceRoll+maxTotal">.maxTotal</a> ⇒ <code>number</code></li><li><a href="#DiceRoll+minTotal">.minTotal</a> ⇒ <code>number</code></li><li><a href="#DiceRoll+notation">.notation</a> ⇒ <code>string</code></li><li><a href="#DiceRoll+output">.output</a> ⇒ <code>string</code></li><li><a href="#DiceRoll+rolls">.rolls</a> ⇒ <code>Array.&lt;(ResultGroup|RollResults|string|number)&gt;</code></li><li><a href="#DiceRoll+total">.total</a> ⇒ <code>number</code></li><li><a href="#DiceRoll+export">.export([format])</a> ⇒ <code>string</code> | <code>null</code></li><li><a href="#DiceRoll+hasExpressions">.hasExpressions()</a> ⇒ <code>boolean</code></li><li><a href="#DiceRoll+hasRolls">.hasRolls()</a> ⇒ <code>boolean</code></li><li><a href="#DiceRoll+roll">.roll()</a> ⇒ <code>Array.&lt;RollResults&gt;</code></li><li><a href="#DiceRoll+toJSON">.toJSON()</a> ⇒ <code>Object</code></li><li><a href="#DiceRoll+toString">.toString()</a> ⇒ <code>string</code></li></ul></li><li><em>static</em><ul><li><a href="#DiceRoll.import">.import(data)</a> ⇒ <a href="#DiceRoll"><code>DiceRoll</code></a></li></ul></li></ul></li></ul><p><a name="new_DiceRoll_new"></a></p><h3 id="new-diceroll-notation" tabindex="-1"><a class="header-anchor" href="#new-diceroll-notation" aria-hidden="true">#</a> new DiceRoll(notation)</h3><p>Create a DiceRoll, parse the notation and roll the dice.</p><p>If <code>notation</code> is an object, it must contain a <code>notation</code> property that defines the notation. It can also have an optional array of <code>RollResults</code>, in the <code>rolls</code> property.</p><p><strong>Throws</strong>:</p><ul><li><code>NotationError</code> notation is invalid</li><li><code>RequiredArgumentError</code> notation is required</li><li><code>TypeError</code> Rolls must be a valid result object, or an array</li></ul><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>notation</td><td><code>string</code> | <code>Object</code></td><td>The notation to roll</td></tr><tr><td>notation.notation</td><td><code>string</code></td><td>If \`notation is an object; the notation to roll</td></tr><tr><td>[notation.rolls]</td><td><code>ResultGroup</code> | <code>Array.&lt;(ResultGroup|RollResults|string|number)&gt;</code></td><td>If <code>notation</code> is an object; the rolls to import</td></tr></tbody></table><p><strong>Example</strong> <em>(String notation)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> roll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoll</span><span class="token punctuation">(</span><span class="token string">&#39;4d6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Example</strong> <em>(Object)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> roll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">notation</span><span class="token operator">:</span> <span class="token string">&#39;4d6&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rolls</span><span class="token operator">:</span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token comment">// RollResults object or array of roll results</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="DiceRoll+averageTotal"></a></p><h3 id="diceroll-averagetotal-⇒-number" tabindex="-1"><a class="header-anchor" href="#diceroll-averagetotal-⇒-number" aria-hidden="true">#</a> diceRoll.averageTotal ⇒ <code>number</code></h3><p>The average possible total for the notation.</p><p><strong>Kind</strong>: instance property of <a href="#DiceRoll"><code>DiceRoll</code></a><br><strong>Since</strong>: 4.3.0<br><a name="DiceRoll+maxTotal"></a></p><h3 id="diceroll-maxtotal-⇒-number" tabindex="-1"><a class="header-anchor" href="#diceroll-maxtotal-⇒-number" aria-hidden="true">#</a> diceRoll.maxTotal ⇒ <code>number</code></h3><p>The maximum possible total for the notation.</p><p><strong>Kind</strong>: instance property of <a href="#DiceRoll"><code>DiceRoll</code></a><br><strong>Since</strong>: 4.3.0<br><a name="DiceRoll+minTotal"></a></p><h3 id="diceroll-mintotal-⇒-number" tabindex="-1"><a class="header-anchor" href="#diceroll-mintotal-⇒-number" aria-hidden="true">#</a> diceRoll.minTotal ⇒ <code>number</code></h3><p>The minimum possible total for the notation.</p><p><strong>Kind</strong>: instance property of <a href="#DiceRoll"><code>DiceRoll</code></a><br><strong>Since</strong>: 4.3.0<br><a name="DiceRoll+notation"></a></p><h3 id="diceroll-notation-⇒-string" tabindex="-1"><a class="header-anchor" href="#diceroll-notation-⇒-string" aria-hidden="true">#</a> diceRoll.notation ⇒ <code>string</code></h3><p>The dice notation.</p><p><strong>Kind</strong>: instance property of <a href="#DiceRoll"><code>DiceRoll</code></a><br><a name="DiceRoll+output"></a></p><h3 id="diceroll-output-⇒-string" tabindex="-1"><a class="header-anchor" href="#diceroll-output-⇒-string" aria-hidden="true">#</a> diceRoll.output ⇒ <code>string</code></h3><p>String representation of the rolls</p><p><strong>Kind</strong>: instance property of <a href="#DiceRoll"><code>DiceRoll</code></a><br><strong>Example</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>2d20<span class="token operator">+</span>1d6<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="DiceRoll+rolls"></a></p><h3 id="diceroll-rolls-⇒-array-resultgroup-rollresults-string-number" tabindex="-1"><a class="header-anchor" href="#diceroll-rolls-⇒-array-resultgroup-rollresults-string-number" aria-hidden="true">#</a> diceRoll.rolls ⇒ <code>Array.&lt;(ResultGroup|RollResults|string|number)&gt;</code></h3><p>The dice rolled for the notation</p><p><strong>Kind</strong>: instance property of <a href="#DiceRoll"><code>DiceRoll</code></a><br><a name="DiceRoll+total"></a></p><h3 id="diceroll-total-⇒-number" tabindex="-1"><a class="header-anchor" href="#diceroll-total-⇒-number" aria-hidden="true">#</a> diceRoll.total ⇒ <code>number</code></h3><p>The roll total</p><p><strong>Kind</strong>: instance property of <a href="#DiceRoll"><code>DiceRoll</code></a><br><a name="DiceRoll+export"></a></p><h3 id="diceroll-export-format-⇒-string-null" tabindex="-1"><a class="header-anchor" href="#diceroll-export-format-⇒-string-null" aria-hidden="true">#</a> diceRoll.export([format]) ⇒ <code>string</code> | <code>null</code></h3><p>Export the object in the given format. If no format is specified, JSON is returned.</p><p><strong>Kind</strong>: instance method of <a href="#DiceRoll"><code>DiceRoll</code></a><br><strong>Returns</strong>: <code>string</code> | <code>null</code> - The exported data, in the specified format<br><strong>Throws</strong>:</p><ul><li><code>TypeError</code> Invalid export format</li></ul><p><strong>See</strong>: <a href="#DiceRoll+toJSON">toJSON</a></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>[format]</td><td><code>exportFormats</code></td><td><code>exportFormats.JSON</code></td><td>The format to export the data as</td></tr></tbody></table><p><a name="DiceRoll+hasExpressions"></a></p><h3 id="diceroll-hasexpressions-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#diceroll-hasexpressions-⇒-boolean" aria-hidden="true">#</a> diceRoll.hasExpressions() ⇒ <code>boolean</code></h3><p>Check whether the DiceRoll has expressions or not.</p><p><strong>Kind</strong>: instance method of <a href="#DiceRoll"><code>DiceRoll</code></a><br><strong>Returns</strong>: <code>boolean</code> - <code>true</code> if the object has expressions, <code>false</code> otherwise<br><a name="DiceRoll+hasRolls"></a></p><h3 id="diceroll-hasrolls-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#diceroll-hasrolls-⇒-boolean" aria-hidden="true">#</a> diceRoll.hasRolls() ⇒ <code>boolean</code></h3><p>Check whether the object has rolled dice or not</p><p><strong>Kind</strong>: instance method of <a href="#DiceRoll"><code>DiceRoll</code></a><br><strong>Returns</strong>: <code>boolean</code> - <code>true</code> if the object has rolls, <code>false</code> otherwise<br><a name="DiceRoll+roll"></a></p><h3 id="diceroll-roll-⇒-array-rollresults" tabindex="-1"><a class="header-anchor" href="#diceroll-roll-⇒-array-rollresults" aria-hidden="true">#</a> diceRoll.roll() ⇒ <code>Array.&lt;RollResults&gt;</code></h3><p>Roll the dice for the stored notation.</p><p>This is called in the constructor, so you&#39;ll only need this if you want to re-roll the notation. However, it&#39;s usually better to create a new <code>DiceRoll</code> instance instead.</p><p><strong>Kind</strong>: instance method of <a href="#DiceRoll"><code>DiceRoll</code></a><br><strong>Returns</strong>: <code>Array.&lt;RollResults&gt;</code> - The results of the rolls<br><a name="DiceRoll+toJSON"></a></p><h3 id="diceroll-tojson-⇒-object" tabindex="-1"><a class="header-anchor" href="#diceroll-tojson-⇒-object" aria-hidden="true">#</a> diceRoll.toJSON() ⇒ <code>Object</code></h3><p>Return an object for JSON serialising.</p><p>This is called automatically when JSON encoding the object.</p><p><strong>Kind</strong>: instance method of <a href="#DiceRoll"><code>DiceRoll</code></a><br><a name="DiceRoll+toString"></a></p><h3 id="diceroll-tostring-⇒-string" tabindex="-1"><a class="header-anchor" href="#diceroll-tostring-⇒-string" aria-hidden="true">#</a> diceRoll.toString() ⇒ <code>string</code></h3><p>Return the String representation of the object.</p><p>This is called automatically when casting the object to a string.</p><p><strong>Kind</strong>: instance method of <a href="#DiceRoll"><code>DiceRoll</code></a><br><strong>See</strong>: <a href="#DiceRoll+output">output</a><br><a name="DiceRoll.import"></a></p><h3 id="diceroll-import-data-⇒-diceroll" tabindex="-1"><a class="header-anchor" href="#diceroll-import-data-⇒-diceroll" aria-hidden="true">#</a> DiceRoll.import(data) ⇒ <a href="#DiceRoll"><code>DiceRoll</code></a></h3><p>Create a new <code>DiceRoll</code> instance with the given data.</p><p><code>data</code> can be an object of data, a JSON / base64 encoded string of such data.</p><p>The object must contain a <code>notation</code> property that defines the notation and, optionally, an array of RollResults, in the <code>rolls</code> property.</p><p><strong>Kind</strong>: static method of <a href="#DiceRoll"><code>DiceRoll</code></a><br><strong>Returns</strong>: <a href="#DiceRoll"><code>DiceRoll</code></a> - The new <code>DiceRoll</code> instance<br><strong>Throws</strong>:</p><ul><li><code>DataFormatError</code> data format is invalid</li></ul><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>data</td><td><code>Object</code> | <code>string</code></td><td>The data to import</td></tr><tr><td>data.notation</td><td><code>string</code></td><td>If <code>notation</code> is an object; the notation to import</td></tr><tr><td>[data.rolls]</td><td><code>Array.&lt;RollResults&gt;</code></td><td>If <code>notation</code> is an object; the rolls to import</td></tr></tbody></table><p><strong>Example</strong> <em>(Object)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>DiceRoll<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">notation</span><span class="token operator">:</span> <span class="token string">&#39;4d6&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rolls</span><span class="token operator">:</span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token comment">// ResultGroup object or array of roll results</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example</strong> <em>(JSON)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>DiceRoll<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;notation&quot;:&quot;4d6&quot;,&quot;rolls&quot;:[...]}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Example</strong> <em>(Base64)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>DiceRoll<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token string">&#39;eyJub3RhdGlvbiI6IjRkNiIsInJvbGxzIjpbXX0=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,79),s=[l];function r(i,c){return o(),a("div",null,s)}const p=e(n,[["render",r],["__file","DiceRoll.html.vue"]]);export{p as default};
