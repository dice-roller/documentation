import{_ as p,r as l,o as u,c as m,a as n,d as e,b as s,w as a,e as c}from"./app-e7f8d9af.js";const h={},k=n("h1",{id:"customisation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#customisation","aria-hidden":"true"},"#"),e(" Customisation")],-1),v=n("h2",{id:"random-number-generator",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#random-number-generator","aria-hidden":"true"},"#"),e(" Random number generator")],-1),g={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"Math.random()",-1),f={href:"https://en.wikipedia.org/wiki/Pseudorandom_number_generator",target:"_blank",rel:"noopener noreferrer"},_=c(`<p>For most purposes, <code>Math.random()</code> should be suitable, however, if you want something more random, or would rather something more powerful, or even cryptographically secure, you can change the &quot;<a href="#engines">engine</a>&quot; used for the number generation.</p><h3 id="engines" tabindex="-1"><a class="header-anchor" href="#engines" aria-hidden="true">#</a> Engines</h3><p>A random number generation (RNG) engine is a class, or object, that determines the next random number that will be generated. There are several built-in engines that you can use:</p><ul><li><code>nativeMath</code>: Utilises <code>Math.random()</code></li><li><code>browserCrypto</code>: Utilises <code>crypto.getRandomValues()</code></li><li><code>nodeCrypto</code>: Utilises <code>require(&#39;crypto&#39;).randomBytes()</code></li><li><code>MersenneTwister19937</code>: Produces a new Mersenne Twister. Must be seeded before use.</li></ul><h4 id="custom-engine" tabindex="-1"><a class="header-anchor" href="#custom-engine" aria-hidden="true">#</a> Custom engine</h4><p>You can also create your own engines. This can be any class or object that has a <code>next()</code> method which returns a 32-bit integer. e.g:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a simple object</span>
<span class="token keyword">const</span> engineA <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">next</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// logic to generate and return random integer...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// or a class</span>
<span class="token keyword">class</span> <span class="token class-name">myEngine</span> <span class="token punctuation">{</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// logic to generate and return random integer...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> engineB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),w={class:"custom-container tip"},y=n("p",{class:"custom-container-title"},"TIP",-1),x={href:"https://github.com/ckknight/random-js",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/ckknight/random-js#engines",target:"_blank",rel:"noopener noreferrer"},M=n("h3",{id:"usage",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#usage","aria-hidden":"true"},"#"),e(" Usage")],-1),T=n("p",null,[e("You can access the number generator by importing the "),n("code",null,"NumberGenerator"),e(" namespace:")],-1),N=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"import"),e(),n("span",{class:"token punctuation"},"{"),e(" DiceRoller"),n("span",{class:"token punctuation"},","),e(" NumberGenerator "),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"from"),e(),n("span",{class:"token string"},"'@dice-roller/rpg-dice-roller'"),n("span",{class:"token punctuation"},";"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),R=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),e(),n("span",{class:"token punctuation"},"{"),e(" DiceRoller"),n("span",{class:"token punctuation"},","),e(" NumberGenerator "),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'@dice-roller/rpg-dice-roller'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),C=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// `NumberGenerator` is available on the global `rpgDiceRoller` variable"),e(`
rpgDiceRoller`),n("span",{class:"token punctuation"},"."),e(`NumberGenerator
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),G=c(`<p><code>NumberGenerator</code> has two properties:</p><ul><li><code>engines</code>: a list of the built-in engines (See <a href="#engines">list above</a>).</li><li><code>generator</code>: an instance of the <code>NumberGenerator</code> class, that generates the random numbers.</li></ul><h4 id="setting-the-engine" tabindex="-1"><a class="header-anchor" href="#setting-the-engine" aria-hidden="true">#</a> Setting the engine</h4><p>You can change the engine that <code>generator</code> uses by setting the <code>numberGenerator.engine</code> property:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> roller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> engines <span class="token operator">=</span> NumberGenerator<span class="token punctuation">.</span>engines<span class="token punctuation">;</span>
<span class="token keyword">const</span> generator <span class="token operator">=</span> NumberGenerator<span class="token punctuation">.</span>generator<span class="token punctuation">;</span>

<span class="token comment">// use the nodeCypto engine</span>
generator<span class="token punctuation">.</span>engine <span class="token operator">=</span> engines<span class="token punctuation">.</span>nodeCrypto<span class="token punctuation">;</span>

<span class="token comment">// roll the notation using nodeCrypto</span>
roller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;d6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// change the engine to Mersenne Twister (This requires a seed)</span>
generator<span class="token punctuation">.</span>engine <span class="token operator">=</span> engines<span class="token punctuation">.</span>MersenneTwister19937<span class="token punctuation">.</span><span class="token function">seed</span><span class="token punctuation">(</span><span class="token number">521</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// roll the notation using Mersenne Twiste</span>
roller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;d6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// use a custom engine</span>
generator<span class="token punctuation">.</span>engine <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// logic to generate and return random integer...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// roll the notation using the custom engine</span>
roller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;d6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to revert back to using the default <code>Math.random()</code>, you can either set the engine to <code>nativeMath</code>, or to a falsy value (e.g. <code>null</code>):</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>generator<span class="token punctuation">.</span>engine <span class="token operator">=</span> engines<span class="token punctuation">.</span>nativeMath<span class="token punctuation">;</span>
generator<span class="token punctuation">.</span>engine <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="generating-a-random-number" tabindex="-1"><a class="header-anchor" href="#generating-a-random-number" aria-hidden="true">#</a> Generating a random number</h4><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>It&#39;s unlikely that you&#39;ll need to generate your own random numbers, as the dice rolls handle this for you, but the functionality is there if you need to work with it.</p></div><p>If you need to generate random numbers outside of rolling dice, the <code>generator</code> has two methods, <code>integer</code> and <code>real</code>, which produce a random integer or float number respectively.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// generate an integer between 1 and 4</span>
generator<span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// generate a float between 1 and 4 exclusive - [min, max)</span>
generator<span class="token punctuation">.</span><span class="token function">real</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// generate an float between 1 and 4 inclusive - [min, max]</span>
generator<span class="token punctuation">.</span><span class="token function">real</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="more-information" tabindex="-1"><a class="header-anchor" href="#more-information" aria-hidden="true">#</a> More information</h3><p>For more information on the engines, and how the generator works, check out:</p>`,13),E={href:"https://github.com/ckknight/random-js",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"NumberGenerator",-1),S=n("h2",{id:"modifier-execution-order",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#modifier-execution-order","aria-hidden":"true"},"#"),e(" Modifier execution order")],-1),q=n("div",{class:"custom-container warning"},[n("p",{class:"custom-container-title"},"WARNING"),n("p",null,"Be careful when changing the modifier execution order. The default order is purposefully defined and changing it may lead to unexpected behaviour."),n("p",null,"If you change the order of a modifier to the same order as another modifier, there is no guarantee of which one will run first.")],-1),I=n("p",null,[e("Modifiers always run in a specific order, regardless of the order you specify them in the notation. This is determined by the modifier's "),n("code",null,"order"),e(" property, and works in ascending order.")],-1),B=n("p",null,"However, sometimes the default order is not desired, because certain games require a slightly different order.",-1),D={href:"https://openlegendrpg.com/core-rules/actions-attributes#advantage--disadvantage-are-only-applied-before-explosions",target:"_blank",rel:"noopener noreferrer"},L=n("strong",null,"before",-1),U=n("code",null,"3",-1),W=n("code",null,"6",-1),Y=n("p",null,[e("Fortunately, you can modify the execution order for any modifier either "),n("a",{href:"#change-default-order"},"globally"),e(", or on a "),n("a",{href:"#change-individual-instance-order"},"per-instance basis"),e(".")],-1),P=n("h3",{id:"change-default-order",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#change-default-order","aria-hidden":"true"},"#"),e(" Change default order")],-1),O=n("p",null,[e("To change the execution order when rolling string notations (e.g. "),n("code",null,"DiceRoll('4d6!kh1')"),e("), you can set the default order for a modifier.")],-1),V=n("code",null,"Modifier",-1),F=n("code",null,"order",-1),J=c(`<p>You can change it like:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// set the explode modifier order to 7</span>
ExplodeModifier<span class="token punctuation">.</span>order <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

<span class="token comment">// set the keep modifier order to 2</span>
KeepModifier<span class="token punctuation">.</span>order <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Any new <code>ExplodeModifier</code>, and <code>KeepModifier</code> objects will now have the new orders. Other modifiers will retain their original order.</p>`,3),K=n("code",null,"Modifier",-1),H=c(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExplodeModifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

mode<span class="token punctuation">.</span>order <span class="token operator">===</span> <span class="token number">7</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Conflicting order values</p><p>When changing a modifier order, any modifiers with the same order value should be changed to a unique value.</p></div><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h4>`,3),z=n("a",{href:"(https://openlegendrpg.com/core-rules/actions-attributes#advantage--disadvantage-are-only-applied-before-explosions)"},"Open Legend example",-1),Q=c(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// With the default order;</span>
<span class="token comment">// roll the dice, explode any that roll a 4, then keep only the highest 4 rolls</span>
<span class="token keyword">const</span> roll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoll</span><span class="token punctuation">(</span><span class="token string">&#39;8d4kh4!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set the keep modifier order to \`3\` (The current order for the explode modifier)</span>
KeepModifier<span class="token punctuation">.</span>order <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">// The drop modifier should always run after the keep modifier, so set that to \`4\`</span>
DropModifier<span class="token punctuation">.</span>order <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

<span class="token comment">// Set the explode modifier to run after keep and drop modifiers</span>
ExplodeModifier<span class="token punctuation">.</span>order <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token comment">// Order 4 and 5 are alreday used for the re-roll and unique modifiers.</span>
<span class="token comment">// We need to change them as well, otherwise the order is ambiguous</span>
ReRollModifier<span class="token punctuation">.</span>order <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
UniqueModifier<span class="token punctuation">.</span>order <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

<span class="token comment">// With the new order;</span>
<span class="token comment">// roll the dice, keep only the highest 4 rolls, then explode any that roll a 4</span>
<span class="token keyword">const</span> roll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiceRoll</span><span class="token punctuation">(</span><span class="token string">&#39;8d4kh4!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="change-individual-instance-order" tabindex="-1"><a class="header-anchor" href="#change-individual-instance-order" aria-hidden="true">#</a> Change individual instance order</h3><div class="custom-container tip"><p class="custom-container-title">Limitations</p><p>This will <strong>not</strong> affect modifiers created from rolling string notation, and is only useful if you are manually creating modifier instances.</p><p>To affect roll notations, change the <a href="#change-default-order">default order</a> instead.</p></div><p>You can change the order on an individual modifier object, by setting the non-static <code>order</code> property:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mod1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExplodeModifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mod1<span class="token punctuation">.</span>order <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This only affects the object you have modified. Creating another <code>ExplodeModifier</code> will still use the <a href="#change-default-order">default order</a>.</p>`,6);function X(Z,$){const o=l("ExternalLinkIcon"),d=l("CodeTabs"),t=l("RouterLink");return u(),m("div",null,[k,v,n("p",null,[e("By default, the dice rolls use Javascript's built-in "),n("a",g,[b,e(" function"),s(o)]),e(" to generate the roll values. This is a form of "),n("a",f,[e("pseudo random number generation"),s(o)]),e(" (PRNG).")]),_,n("div",w,[y,n("p",null,[e("We use "),n("a",x,[e("random-js"),s(o)]),e(" behind the scenes, and the built-in engines are taken from that library. You can read more about how they work in the "),n("a",j,[e("random-js documentation"),s(o)])])]),M,T,s(d,{id:"58",data:[{id:"ESM"},{id:"CommonJS"},{id:"Browser"}],"tab-id":"module-type"},{title0:a(({value:i,isActive:r})=>[e("ESM")]),title1:a(({value:i,isActive:r})=>[e("CommonJS")]),title2:a(({value:i,isActive:r})=>[e("Browser")]),tab0:a(({value:i,isActive:r})=>[N]),tab1:a(({value:i,isActive:r})=>[R]),tab2:a(({value:i,isActive:r})=>[C]),_:1}),G,n("ul",null,[n("li",null,[n("a",E,[e("random-js documentation"),s(o)]),e("; this is used behind the scenes. You can find more info on the engines and how to use the Mersenne Twister engine.")]),n("li",null,[s(t,{to:"/api/utilities/NumberGenerator.html"},{default:a(()=>[e("API docs")]),_:1}),e(" for more detail on the "),A,e(" class.")])]),S,q,I,B,n("p",null,[e("For example, Open Legend requires the "),n("a",D,[e("keep modifier to be run "),L,e(" the explode modifier"),s(o)]),e(". However, by default, the "),s(t,{to:"/guide/notation/modifiers.html#exploding"},{default:a(()=>[e("explode modifier")]),_:1}),e(" runs first.")]),n("p",null,[e("This is because the "),s(t,{to:"/guide/notation/modifiers.html#exploding"},{default:a(()=>[e("explode modifier")]),_:1}),e(" has an order of "),U,e(", and the "),s(t,{to:"/guide/notation/modifiers.html#keep"},{default:a(()=>[e("keep modifier")]),_:1}),e(" has an order of "),W,e(".")]),Y,P,O,n("p",null,[e("Each "),s(t,{to:"/api/modifiers/Modifier.html"},{default:a(()=>[V]),_:1}),e(" class has a static "),s(t,{to:"/api/modifiers/Modifier.html#modifier-order-number"},{default:a(()=>[F]),_:1}),e(" property, which is used to set the order when a new Modifier is created.")]),J,n("p",null,[e("This also works with manually created "),s(t,{to:"/api/modifiers/Modifier.html"},{default:a(()=>[K]),_:1}),e(" objects:")]),H,n("p",null,[e("Using the "),z,e(", we would need the "),s(t,{to:"/guide/notation/modifiers.html#keep"},{default:a(()=>[e("keep modifier")]),_:1}),e(" to run before the "),s(t,{to:"/guide/notation/modifiers.html#exploding"},{default:a(()=>[e("explode modifier")]),_:1}),e(".")]),Q])}const en=p(h,[["render",X],["__file","customisation.html.vue"]]);export{en as default};
