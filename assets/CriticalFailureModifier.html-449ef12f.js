import{_ as i,o as e,c as r,e as a}from"./app-e7f8d9af.js";const t={},o=a('<h1 id="criticalfailuremodifier" tabindex="-1"><a class="header-anchor" href="#criticalfailuremodifier" aria-hidden="true">#</a> CriticalFailureModifier</h1><p><a name="CriticalFailureModifier"></a></p><h2 id="criticalfailuremodifier-⇐-comparisonmodifier" tabindex="-1"><a class="header-anchor" href="#criticalfailuremodifier-⇐-comparisonmodifier" aria-hidden="true">#</a> CriticalFailureModifier ⇐ <code>ComparisonModifier</code></h2><p>A <code>CriticalFailureModifier</code> modifier flags values that match a comparison.</p><p>Unlike most other modifiers, it doesn&#39;t affect the roll value, it simply &quot;flags&quot; matching rolls.</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>ComparisonModifier</code><br><strong>See</strong>: <a href="CriticalSuccessModifier">CriticalSuccessModifier</a> for the opposite of this modifier</p><ul><li><a href="#CriticalFailureModifier">CriticalFailureModifier</a> ⇐ <code>ComparisonModifier</code><ul><li><a href="#new_CriticalFailureModifier_new">new CriticalFailureModifier([comparePoint])</a></li><li><a href="#CriticalFailureModifier+order">.order</a> : <code>number</code></li><li><a href="#CriticalFailureModifier+name">.name</a> ⇒ <code>string</code></li><li><a href="#CriticalFailureModifier+notation">.notation</a> ⇒ <code>string</code></li><li><a href="#CriticalFailureModifier+defaultComparePoint">.defaultComparePoint(_context)</a> ⇒ <code>array</code></li><li><a href="#CriticalFailureModifier+run">.run(results, _context)</a> ⇒ <code>RollResults</code></li></ul></li></ul><p><a name="new_CriticalFailureModifier_new"></a></p><h3 id="new-criticalfailuremodifier-comparepoint" tabindex="-1"><a class="header-anchor" href="#new-criticalfailuremodifier-comparepoint" aria-hidden="true">#</a> new CriticalFailureModifier([comparePoint])</h3><p>Create a <code>CriticalFailureModifier</code> instance.</p><p><strong>Throws</strong>:</p><ul><li><code>TypeError</code> comparePoint must be a <code>ComparePoint</code> object</li></ul><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>[comparePoint]</td><td><code>ComparePoint</code></td><td>The comparison object</td></tr></tbody></table><p><a name="CriticalFailureModifier+order"></a></p><h3 id="criticalfailuremodifier-order-number" tabindex="-1"><a class="header-anchor" href="#criticalfailuremodifier-order-number" aria-hidden="true">#</a> criticalFailureModifier.order : <code>number</code></h3><p>The default modifier execution order.</p><p><strong>Kind</strong>: instance property of <a href="#CriticalFailureModifier"><code>CriticalFailureModifier</code></a><br><a name="CriticalFailureModifier+name"></a></p><h3 id="criticalfailuremodifier-name-⇒-string" tabindex="-1"><a class="header-anchor" href="#criticalfailuremodifier-name-⇒-string" aria-hidden="true">#</a> criticalFailureModifier.name ⇒ <code>string</code></h3><p>The name of the modifier.</p><p><strong>Kind</strong>: instance property of <a href="#CriticalFailureModifier"><code>CriticalFailureModifier</code></a><br><strong>Returns</strong>: <code>string</code> - &#39;critical-failure&#39;<br><a name="CriticalFailureModifier+notation"></a></p><h3 id="criticalfailuremodifier-notation-⇒-string" tabindex="-1"><a class="header-anchor" href="#criticalfailuremodifier-notation-⇒-string" aria-hidden="true">#</a> criticalFailureModifier.notation ⇒ <code>string</code></h3><p>The modifier&#39;s notation.</p><p><strong>Kind</strong>: instance property of <a href="#CriticalFailureModifier"><code>CriticalFailureModifier</code></a><br><a name="CriticalFailureModifier+defaultComparePoint"></a></p><h3 id="criticalfailuremodifier-defaultcomparepoint-context-⇒-array" tabindex="-1"><a class="header-anchor" href="#criticalfailuremodifier-defaultcomparepoint-context-⇒-array" aria-hidden="true">#</a> criticalFailureModifier.defaultComparePoint(_context) ⇒ <code>array</code></h3><p>The default compare point definition</p><p><strong>Kind</strong>: instance method of <a href="#CriticalFailureModifier"><code>CriticalFailureModifier</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_context</td><td><code>StandardDice</code> | <code>RollGroup</code></td><td>The object that the modifier is attached to</td></tr></tbody></table><p><a name="CriticalFailureModifier+run"></a></p><h3 id="criticalfailuremodifier-run-results-context-⇒-rollresults" tabindex="-1"><a class="header-anchor" href="#criticalfailuremodifier-run-results-context-⇒-rollresults" aria-hidden="true">#</a> criticalFailureModifier.run(results, _context) ⇒ <code>RollResults</code></h3><p>Run the modifier on the results.</p><p><strong>Kind</strong>: instance method of <a href="#CriticalFailureModifier"><code>CriticalFailureModifier</code></a><br><strong>Returns</strong>: <code>RollResults</code> - The modified results</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>results</td><td><code>RollResults</code></td><td>The results to run the modifier against</td></tr><tr><td>_context</td><td><code>StandardDice</code> | <code>RollGroup</code></td><td>The object that the modifier is attached to</td></tr></tbody></table>',32),d=[o];function c(l,n){return e(),r("div",null,d)}const s=i(t,[["render",c],["__file","CriticalFailureModifier.html.vue"]]);export{s as default};
