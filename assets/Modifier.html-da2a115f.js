import{_ as e,o,c as t,e as i}from"./app-e7f8d9af.js";const d={},r=i('<h1 id="modifier" tabindex="-1"><a class="header-anchor" href="#modifier" aria-hidden="true">#</a> Modifier</h1><p><a name="Modifier"></a></p><h2 id="modifier-1" tabindex="-1"><a class="header-anchor" href="#modifier-1" aria-hidden="true">#</a> <em>Modifier</em></h2><div class="custom-container warning"><p class="custom-container-title">Abstract class</p><p>This is an abstract class and should not be used directly. You should use one of the extended classes, or extend the class yourself.</p></div><p>A <code>Modifier</code> is the base modifier class that all others extend from.</p><p><strong>Kind</strong>: global abstract class</p><ul><li><em><a href="#Modifier">Modifier</a></em><ul><li><em><a href="#new_Modifier_new">new Modifier()</a></em></li><li><em><a href="#Modifier+order">.order</a> : <code>number</code></em></li><li><em><a href="#Modifier+name">.name</a> ⇒ <code>string</code></em></li><li><em><a href="#Modifier+notation">.notation</a> ⇒ <code>string</code></em></li><li><em><a href="#Modifier+maxIterations">.maxIterations</a> ⇒ <code>number</code></em></li><li><em><a href="#Modifier+defaults">.defaults(_context)</a> ⇒ <code>object</code></em></li><li><em><a href="#Modifier+useDefaultsIfNeeded">.useDefaultsIfNeeded(_context)</a> ⇒ <code>void</code></em></li><li><em><a href="#Modifier+run">.run(results, _context)</a> ⇒ <code>RollResults</code></em></li><li><em><a href="#Modifier+toJSON">.toJSON()</a> ⇒ <code>Object</code></em></li><li><em><a href="#Modifier+toString">.toString()</a> ⇒ <code>string</code></em></li></ul></li></ul><p><a name="new_Modifier_new"></a></p><h3 id="new-modifier" tabindex="-1"><a class="header-anchor" href="#new-modifier" aria-hidden="true">#</a> <em>new Modifier()</em></h3><p>Create a <code>Modifier</code> instance.</p><p><a name="Modifier+order"></a></p><h3 id="modifier-order-number" tabindex="-1"><a class="header-anchor" href="#modifier-order-number" aria-hidden="true">#</a> <em>modifier.order : <code>number</code></em></h3><p>The default modifier execution order.</p><p><strong>Kind</strong>: instance property of <a href="#Modifier"><code>Modifier</code></a><br><a name="Modifier+name"></a></p><h3 id="modifier-name-⇒-string" tabindex="-1"><a class="header-anchor" href="#modifier-name-⇒-string" aria-hidden="true">#</a> <em>modifier.name ⇒ <code>string</code></em></h3><p>The name of the modifier.</p><p><strong>Kind</strong>: instance property of <a href="#Modifier"><code>Modifier</code></a><br><strong>Returns</strong>: <code>string</code> - &#39;modifier&#39;<br><a name="Modifier+notation"></a></p><h3 id="modifier-notation-⇒-string" tabindex="-1"><a class="header-anchor" href="#modifier-notation-⇒-string" aria-hidden="true">#</a> <em>modifier.notation ⇒ <code>string</code></em></h3><p>The modifier&#39;s notation.</p><p><strong>Kind</strong>: instance property of <a href="#Modifier"><code>Modifier</code></a><br><a name="Modifier+maxIterations"></a></p><h3 id="modifier-maxiterations-⇒-number" tabindex="-1"><a class="header-anchor" href="#modifier-maxiterations-⇒-number" aria-hidden="true">#</a> <em>modifier.maxIterations ⇒ <code>number</code></em></h3><p>The maximum number of iterations that the modifier can apply to a single die roll</p><p><strong>Kind</strong>: instance property of <a href="#Modifier"><code>Modifier</code></a><br><strong>Returns</strong>: <code>number</code> - <code>1000</code><br><a name="Modifier+defaults"></a></p><h3 id="modifier-defaults-context-⇒-object" tabindex="-1"><a class="header-anchor" href="#modifier-defaults-context-⇒-object" aria-hidden="true">#</a> <em>modifier.defaults(_context) ⇒ <code>object</code></em></h3><p>No default values present</p><p><strong>Kind</strong>: instance method of <a href="#Modifier"><code>Modifier</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_context</td><td><code>StandardDice</code> | <code>RollGroup</code></td><td>The object that the modifier is attached to</td></tr></tbody></table><p><a name="Modifier+useDefaultsIfNeeded"></a></p><h3 id="modifier-usedefaultsifneeded-context-⇒-void" tabindex="-1"><a class="header-anchor" href="#modifier-usedefaultsifneeded-context-⇒-void" aria-hidden="true">#</a> <em>modifier.useDefaultsIfNeeded(_context) ⇒ <code>void</code></em></h3><p>Processing default values definitions</p><p><strong>Kind</strong>: instance method of <a href="#Modifier"><code>Modifier</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_context</td><td><code>StandardDice</code> | <code>RollGroup</code></td><td>The object that the modifier is attached to</td></tr></tbody></table><p><a name="Modifier+run"></a></p><h3 id="modifier-run-results-context-⇒-rollresults" tabindex="-1"><a class="header-anchor" href="#modifier-run-results-context-⇒-rollresults" aria-hidden="true">#</a> <em>modifier.run(results, _context) ⇒ <code>RollResults</code></em></h3><p>Run the modifier on the results.</p><p><strong>Kind</strong>: instance method of <a href="#Modifier"><code>Modifier</code></a><br><strong>Returns</strong>: <code>RollResults</code> - The modified results</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>results</td><td><code>RollResults</code></td><td>The results to run the modifier against</td></tr><tr><td>_context</td><td><code>StandardDice</code> | <code>RollGroup</code></td><td>The object that the modifier is attached to</td></tr></tbody></table><p><a name="Modifier+toJSON"></a></p><h3 id="modifier-tojson-⇒-object" tabindex="-1"><a class="header-anchor" href="#modifier-tojson-⇒-object" aria-hidden="true">#</a> <em>modifier.toJSON() ⇒ <code>Object</code></em></h3><p>Return an object for JSON serialising.</p><p>This is called automatically when JSON encoding the object.</p><p><strong>Kind</strong>: instance method of <a href="#Modifier"><code>Modifier</code></a><br><a name="Modifier+toString"></a></p><h3 id="modifier-tostring-⇒-string" tabindex="-1"><a class="header-anchor" href="#modifier-tostring-⇒-string" aria-hidden="true">#</a> <em>modifier.toString() ⇒ <code>string</code></em></h3><p>Return the String representation of the object.</p><p>This is called automatically when casting the object to a string.</p><p><strong>Kind</strong>: instance method of <a href="#Modifier"><code>Modifier</code></a><br><strong>See</strong>: <a href="#Modifier+notation">notation</a></p>',46),a=[r];function n(s,c){return o(),t("div",null,a)}const h=e(d,[["render",n],["__file","Modifier.html.vue"]]);export{h as default};
