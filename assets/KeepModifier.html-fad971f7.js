import{_ as e,o as r,c as o,e as t}from"./app-e7f8d9af.js";const d={},i=t('<h1 id="keepmodifier" tabindex="-1"><a class="header-anchor" href="#keepmodifier" aria-hidden="true">#</a> KeepModifier</h1><p><a name="KeepModifier"></a></p><h2 id="keepmodifier-⇐-modifier" tabindex="-1"><a class="header-anchor" href="#keepmodifier-⇐-modifier" aria-hidden="true">#</a> KeepModifier ⇐ <code>Modifier</code></h2><p>A <code>KeepModifier</code> will &quot;keep&quot; dice from a roll, dropping (Remove from total calculations) all others.</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>Modifier</code><br><strong>See</strong>: <a href="DropModifier">DropModifier</a> for the opposite of this modifier</p><ul><li><a href="#KeepModifier">KeepModifier</a> ⇐ <code>Modifier</code><ul><li><a href="#new_KeepModifier_new">new KeepModifier([end], [qty])</a></li><li><a href="#KeepModifier+order">.order</a> : <code>number</code></li><li><a href="#KeepModifier+end">.end</a> ⇒ <code>string</code></li><li><a href="#KeepModifier+end">.end</a></li><li><a href="#KeepModifier+name">.name</a> ⇒ <code>string</code></li><li><a href="#KeepModifier+notation">.notation</a> ⇒ <code>string</code></li><li><a href="#KeepModifier+qty">.qty</a> ⇒ <code>number</code></li><li><a href="#KeepModifier+qty">.qty</a></li><li><a href="#KeepModifier+rangeToDrop">.rangeToDrop(_results)</a> ⇒ <code>Array.&lt;number&gt;</code></li><li><a href="#KeepModifier+run">.run(results, _context)</a> ⇒ <code>ResultGroup</code> | <code>RollResults</code></li><li><a href="#KeepModifier+toJSON">.toJSON()</a> ⇒ <code>Object</code></li></ul></li></ul><p><a name="new_KeepModifier_new"></a></p><h3 id="new-keepmodifier-end-qty" tabindex="-1"><a class="header-anchor" href="#new-keepmodifier-end-qty" aria-hidden="true">#</a> new KeepModifier([end], [qty])</h3><p>Create a <code>KeepModifier</code> instance</p><p><strong>Throws</strong>:</p><ul><li><code>RangeError</code> End must be one of &#39;h&#39; or &#39;l&#39;</li><li><code>TypeError</code> qty must be a positive integer</li></ul><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>[end]</td><td><code>string</code></td><td><code>&quot;h&quot;</code></td><td>Either `h</td></tr><tr><td>[qty]</td><td><code>number</code></td><td><code>1</code></td><td>The amount dice to keep</td></tr></tbody></table><p><a name="KeepModifier+order"></a></p><h3 id="keepmodifier-order-number" tabindex="-1"><a class="header-anchor" href="#keepmodifier-order-number" aria-hidden="true">#</a> keepModifier.order : <code>number</code></h3><p>The default modifier execution order.</p><p><strong>Kind</strong>: instance property of <a href="#KeepModifier"><code>KeepModifier</code></a><br><a name="KeepModifier+end"></a></p><h3 id="keepmodifier-end-⇒-string" tabindex="-1"><a class="header-anchor" href="#keepmodifier-end-⇒-string" aria-hidden="true">#</a> keepModifier.end ⇒ <code>string</code></h3><p>Which end the rolls should be kept (&quot;h&quot; = High, &quot;l&quot; = Low).</p><p><strong>Kind</strong>: instance property of <a href="#KeepModifier"><code>KeepModifier</code></a><br><strong>Returns</strong>: <code>string</code> - &#39;h&#39; or &#39;l&#39;<br><a name="KeepModifier+end"></a></p><h3 id="keepmodifier-end" tabindex="-1"><a class="header-anchor" href="#keepmodifier-end" aria-hidden="true">#</a> keepModifier.end</h3><p>Set which end the rolls should be kept (&quot;h&quot; = High, &quot;l&quot; = Low).</p><p><strong>Kind</strong>: instance property of <a href="#KeepModifier"><code>KeepModifier</code></a><br><strong>Throws</strong>:</p><ul><li><code>RangeError</code> End must be one of &#39;h&#39; or &#39;l&#39;</li></ul><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>value</td><td><code>string</code></td><td>Either &#39;h&#39; or &#39;l&#39;</td></tr></tbody></table><p><a name="KeepModifier+name"></a></p><h3 id="keepmodifier-name-⇒-string" tabindex="-1"><a class="header-anchor" href="#keepmodifier-name-⇒-string" aria-hidden="true">#</a> keepModifier.name ⇒ <code>string</code></h3><p>The name of the modifier.</p><p><strong>Kind</strong>: instance property of <a href="#KeepModifier"><code>KeepModifier</code></a><br><strong>Returns</strong>: <code>string</code> - &#39;keep-l&#39; or &#39;keep-h&#39;<br><a name="KeepModifier+notation"></a></p><h3 id="keepmodifier-notation-⇒-string" tabindex="-1"><a class="header-anchor" href="#keepmodifier-notation-⇒-string" aria-hidden="true">#</a> keepModifier.notation ⇒ <code>string</code></h3><p>The modifier&#39;s notation.</p><p><strong>Kind</strong>: instance property of <a href="#KeepModifier"><code>KeepModifier</code></a><br><a name="KeepModifier+qty"></a></p><h3 id="keepmodifier-qty-⇒-number" tabindex="-1"><a class="header-anchor" href="#keepmodifier-qty-⇒-number" aria-hidden="true">#</a> keepModifier.qty ⇒ <code>number</code></h3><p>The quantity of dice that should be kept.</p><p><strong>Kind</strong>: instance property of <a href="#KeepModifier"><code>KeepModifier</code></a><br><a name="KeepModifier+qty"></a></p><h3 id="keepmodifier-qty" tabindex="-1"><a class="header-anchor" href="#keepmodifier-qty" aria-hidden="true">#</a> keepModifier.qty</h3><p>Set the quantity of dice that should be kept.</p><p><strong>Kind</strong>: instance property of <a href="#KeepModifier"><code>KeepModifier</code></a><br><strong>Throws</strong>:</p><ul><li><code>TypeError</code> qty must be a positive finite integer</li></ul><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><code>number</code></td></tr></tbody></table><p><a name="KeepModifier+rangeToDrop"></a></p><h3 id="keepmodifier-rangetodrop-results-⇒-array-number" tabindex="-1"><a class="header-anchor" href="#keepmodifier-rangetodrop-results-⇒-array-number" aria-hidden="true">#</a> keepModifier.rangeToDrop(_results) ⇒ <code>Array.&lt;number&gt;</code></h3><p>Determine the start and end (end exclusive) range of rolls to drop.</p><p><strong>Kind</strong>: instance method of <a href="#KeepModifier"><code>KeepModifier</code></a><br><strong>Returns</strong>: <code>Array.&lt;number&gt;</code> - The min / max range to drop</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_results</td><td><code>RollResults</code></td><td>The results to drop from</td></tr></tbody></table><p><a name="KeepModifier+run"></a></p><h3 id="keepmodifier-run-results-context-⇒-resultgroup-rollresults" tabindex="-1"><a class="header-anchor" href="#keepmodifier-run-results-context-⇒-resultgroup-rollresults" aria-hidden="true">#</a> keepModifier.run(results, _context) ⇒ <code>ResultGroup</code> | <code>RollResults</code></h3><p>Run the modifier on the results.</p><p><strong>Kind</strong>: instance method of <a href="#KeepModifier"><code>KeepModifier</code></a><br><strong>Returns</strong>: <code>ResultGroup</code> | <code>RollResults</code> - The modified results</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>results</td><td><code>ResultGroup</code> | <code>RollResults</code></td><td>The results to run the modifier against</td></tr><tr><td>_context</td><td><code>StandardDice</code> | <code>RollGroup</code></td><td>The object that the modifier is attached to</td></tr></tbody></table><p><a name="KeepModifier+toJSON"></a></p><h3 id="keepmodifier-tojson-⇒-object" tabindex="-1"><a class="header-anchor" href="#keepmodifier-tojson-⇒-object" aria-hidden="true">#</a> keepModifier.toJSON() ⇒ <code>Object</code></h3><p>Return an object for JSON serialising.</p><p>This is called automatically when JSON encoding the object.</p><p><strong>Kind</strong>: instance method of <a href="#KeepModifier"><code>KeepModifier</code></a></p>',54),a=[i];function n(p,h){return r(),o("div",null,a)}const c=e(d,[["render",n],["__file","KeepModifier.html.vue"]]);export{c as default};
