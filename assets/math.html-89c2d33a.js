import{_ as e,o as a,c as n,e as t}from"./app-e7f8d9af.js";const s={},o=t(`<h1 id="math" tabindex="-1"><a class="header-anchor" href="#math" aria-hidden="true">#</a> math</h1><h2 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h2><dl><dt><a href="#compareNumbers">compareNumbers(a, b, operator)</a> ⇒ <code>boolean</code></dt><dd><p>Check if <code>a</code> is comparative to <code>b</code> with the given operator.</p></dd><dt><a href="#evaluate">evaluate(equation)</a> ⇒ <code>number</code></dt><dd><p>Evaluate mathematical strings.</p></dd><dt><a href="#isNumeric">isNumeric(val)</a> ⇒ <code>boolean</code></dt><dd><p>Check if the given value is a valid finite number.</p></dd><dt><a href="#isSafeNumber">isSafeNumber(val)</a> ⇒ <code>boolean</code></dt><dd><p>Check if the given value is a &quot;safe&quot; number.</p><p>A &quot;safe&quot; number falls within the <code>Number.MAX_SAFE_INTEGER</code> and <code>Number.MIN_SAFE_INTEGER</code> values (Inclusive).</p></dd><dt><a href="#sumArray">sumArray(numbers)</a> ⇒ <code>number</code></dt><dd><p>Take an array of numbers and add the values together.</p></dd><dt><a href="#toFixed">toFixed(num, [precision])</a> ⇒ <code>number</code></dt><dd><p>Round a number to the given amount of digits after the decimal point, removing any trailing zeros after the decimal point.</p></dd></dl><p><a name="compareNumbers"></a></p><h2 id="comparenumbers-a-b-operator-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#comparenumbers-a-b-operator-⇒-boolean" aria-hidden="true">#</a> compareNumbers(a, b, operator) ⇒ <code>boolean</code></h2><p>Check if <code>a</code> is comparative to <code>b</code> with the given operator.</p><p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>boolean</code> - <code>true</code> if the comparison matches, <code>false</code> otherwise</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>a</td><td><code>number</code></td><td>The number to compare with <code>b</code></td></tr><tr><td>b</td><td><code>number</code></td><td>The number to compare with <code>a</code></td></tr><tr><td>operator</td><td><code>string</code></td><td>A valid comparative operator: <code>=, &lt;, &gt;, &lt;=, &gt;=, !=, &lt;&gt;</code></td></tr></tbody></table><p><strong>Example</strong> <em>(Is \`a\` greater than \`b\`?)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token function">compareNumber</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example</strong> <em>(Is \`a\` equal to \`b\`?)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token function">compareNumber</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="evaluate"></a></p><h2 id="evaluate-equation-⇒-number" tabindex="-1"><a class="header-anchor" href="#evaluate-equation-⇒-number" aria-hidden="true">#</a> evaluate(equation) ⇒ <code>number</code></h2><p>Evaluate mathematical strings.</p><p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>number</code> - The result of the equation</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>equation</td><td><code>string</code></td><td>The mathematical equation to compute.</td></tr></tbody></table><p><strong>Example</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&#39;5+6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="isNumeric"></a></p><h2 id="isnumeric-val-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#isnumeric-val-⇒-boolean" aria-hidden="true">#</a> isNumeric(val) ⇒ <code>boolean</code></h2><p>Check if the given value is a valid finite number.</p><p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>boolean</code> - <code>true</code> if it is a finite number, <code>false</code> otherwise</p><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>val</td><td><code>*</code></td></tr></tbody></table><p><a name="isSafeNumber"></a></p><h2 id="issafenumber-val-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#issafenumber-val-⇒-boolean" aria-hidden="true">#</a> isSafeNumber(val) ⇒ <code>boolean</code></h2><p>Check if the given value is a &quot;safe&quot; number.</p><p>A &quot;safe&quot; number falls within the <code>Number.MAX_SAFE_INTEGER</code> and <code>Number.MIN_SAFE_INTEGER</code> values (Inclusive).</p><p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>boolean</code> - <code>true</code> if the value is a &quot;safe&quot; number, <code>false</code> otherwise</p><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>val</td><td><code>*</code></td></tr></tbody></table><p><a name="sumArray"></a></p><h2 id="sumarray-numbers-⇒-number" tabindex="-1"><a class="header-anchor" href="#sumarray-numbers-⇒-number" aria-hidden="true">#</a> sumArray(numbers) ⇒ <code>number</code></h2><p>Take an array of numbers and add the values together.</p><p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>number</code> - The summed value</p><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>numbers</td><td><code>Array.&lt;number&gt;</code></td></tr></tbody></table><p><a name="toFixed"></a></p><h2 id="tofixed-num-precision-⇒-number" tabindex="-1"><a class="header-anchor" href="#tofixed-num-precision-⇒-number" aria-hidden="true">#</a> toFixed(num, [precision]) ⇒ <code>number</code></h2><p>Round a number to the given amount of digits after the decimal point, removing any trailing zeros after the decimal point.</p><p><strong>Kind</strong>: global function</p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>num</td><td><code>number</code></td><td></td><td>The number to round</td></tr><tr><td>[precision]</td><td><code>number</code></td><td><code>0</code></td><td>The number of digits after the decimal point</td></tr></tbody></table><p><strong>Example</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1.236</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.24</span>
<span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">30.1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30.1</span>
<span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">4.0000000004</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42),d=[o];function r(c,i){return a(),n("div",null,d)}const u=e(s,[["render",r],["__file","math.html.vue"]]);export{u as default};
