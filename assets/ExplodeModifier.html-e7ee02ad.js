import{_ as e,o,c as d,e as t}from"./app-e7f8d9af.js";const r={},i=t('<h1 id="explodemodifier" tabindex="-1"><a class="header-anchor" href="#explodemodifier" aria-hidden="true">#</a> ExplodeModifier</h1><p><a name="ExplodeModifier"></a></p><h2 id="explodemodifier-⇐-comparisonmodifier" tabindex="-1"><a class="header-anchor" href="#explodemodifier-⇐-comparisonmodifier" aria-hidden="true">#</a> ExplodeModifier ⇐ <code>ComparisonModifier</code></h2><p>An <code>ExplodeModifier</code> re-rolls dice that match a given test, and adds them to the results.</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>ComparisonModifier</code><br><strong>See</strong>: <a href="ReRollModifier">ReRollModifier</a> if you want to replace the old value with the new, rather than adding</p><ul><li><a href="#ExplodeModifier">ExplodeModifier</a> ⇐ <code>ComparisonModifier</code><ul><li><a href="#new_ExplodeModifier_new">new ExplodeModifier([comparePoint], [compound], [penetrate])</a></li><li><a href="#ExplodeModifier+order">.order</a> : <code>number</code></li><li><a href="#ExplodeModifier+compound">.compound</a> ⇒ <code>boolean</code></li><li><a href="#ExplodeModifier+name">.name</a> ⇒ <code>string</code></li><li><a href="#ExplodeModifier+notation">.notation</a> ⇒ <code>string</code></li><li><a href="#ExplodeModifier+penetrate">.penetrate</a> ⇒ <code>boolean</code></li><li><a href="#ExplodeModifier+defaultComparePoint">.defaultComparePoint(_context)</a> ⇒ <code>array</code></li><li><a href="#ExplodeModifier+run">.run(results, _context)</a> ⇒ <code>RollResults</code></li><li><a href="#ExplodeModifier+toJSON">.toJSON()</a> ⇒ <code>Object</code></li></ul></li></ul><p><a name="new_ExplodeModifier_new"></a></p><h3 id="new-explodemodifier-comparepoint-compound-penetrate" tabindex="-1"><a class="header-anchor" href="#new-explodemodifier-comparepoint-compound-penetrate" aria-hidden="true">#</a> new ExplodeModifier([comparePoint], [compound], [penetrate])</h3><p>Create an <code>ExplodeModifier</code> instance</p><p><strong>Throws</strong>:</p><ul><li><code>TypeError</code> comparePoint must be a <code>ComparePoint</code> object</li></ul><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>[comparePoint]</td><td><code>ComparePoint</code></td><td><code></code></td><td>The comparison object</td></tr><tr><td>[compound]</td><td><code>boolean</code></td><td><code>false</code></td><td>Whether to compound or not</td></tr><tr><td>[penetrate]</td><td><code>boolean</code></td><td><code>false</code></td><td>Whether to penetrate or not</td></tr></tbody></table><p><a name="ExplodeModifier+order"></a></p><h3 id="explodemodifier-order-number" tabindex="-1"><a class="header-anchor" href="#explodemodifier-order-number" aria-hidden="true">#</a> explodeModifier.order : <code>number</code></h3><p>The default modifier execution order.</p><p><strong>Kind</strong>: instance property of <a href="#ExplodeModifier"><code>ExplodeModifier</code></a><br><a name="ExplodeModifier+compound"></a></p><h3 id="explodemodifier-compound-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#explodemodifier-compound-⇒-boolean" aria-hidden="true">#</a> explodeModifier.compound ⇒ <code>boolean</code></h3><p>Whether the modifier should compound the results or not.</p><p><strong>Kind</strong>: instance property of <a href="#ExplodeModifier"><code>ExplodeModifier</code></a><br><strong>Returns</strong>: <code>boolean</code> - <code>true</code> if it should compound, <code>false</code> otherwise<br><a name="ExplodeModifier+name"></a></p><h3 id="explodemodifier-name-⇒-string" tabindex="-1"><a class="header-anchor" href="#explodemodifier-name-⇒-string" aria-hidden="true">#</a> explodeModifier.name ⇒ <code>string</code></h3><p>The name of the modifier.</p><p><strong>Kind</strong>: instance property of <a href="#ExplodeModifier"><code>ExplodeModifier</code></a><br><strong>Returns</strong>: <code>string</code> - &#39;explode&#39;<br><a name="ExplodeModifier+notation"></a></p><h3 id="explodemodifier-notation-⇒-string" tabindex="-1"><a class="header-anchor" href="#explodemodifier-notation-⇒-string" aria-hidden="true">#</a> explodeModifier.notation ⇒ <code>string</code></h3><p>The modifier&#39;s notation.</p><p><strong>Kind</strong>: instance property of <a href="#ExplodeModifier"><code>ExplodeModifier</code></a><br><a name="ExplodeModifier+penetrate"></a></p><h3 id="explodemodifier-penetrate-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#explodemodifier-penetrate-⇒-boolean" aria-hidden="true">#</a> explodeModifier.penetrate ⇒ <code>boolean</code></h3><p>Whether the modifier should penetrate the results or not.</p><p><strong>Kind</strong>: instance property of <a href="#ExplodeModifier"><code>ExplodeModifier</code></a><br><strong>Returns</strong>: <code>boolean</code> - <code>true</code> if it should penetrate, <code>false</code> otherwise<br><a name="ExplodeModifier+defaultComparePoint"></a></p><h3 id="explodemodifier-defaultcomparepoint-context-⇒-array" tabindex="-1"><a class="header-anchor" href="#explodemodifier-defaultcomparepoint-context-⇒-array" aria-hidden="true">#</a> explodeModifier.defaultComparePoint(_context) ⇒ <code>array</code></h3><p>The default compare point definition</p><p><strong>Kind</strong>: instance method of <a href="#ExplodeModifier"><code>ExplodeModifier</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_context</td><td><code>StandardDice</code> | <code>RollGroup</code></td><td>The object that the modifier is attached to</td></tr></tbody></table><p><a name="ExplodeModifier+run"></a></p><h3 id="explodemodifier-run-results-context-⇒-rollresults" tabindex="-1"><a class="header-anchor" href="#explodemodifier-run-results-context-⇒-rollresults" aria-hidden="true">#</a> explodeModifier.run(results, _context) ⇒ <code>RollResults</code></h3><p>Run the modifier on the results.</p><p><strong>Kind</strong>: instance method of <a href="#ExplodeModifier"><code>ExplodeModifier</code></a><br><strong>Returns</strong>: <code>RollResults</code> - The modified results</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>results</td><td><code>RollResults</code></td><td>The results to run the modifier against</td></tr><tr><td>_context</td><td><code>StandardDice</code> | <code>RollGroup</code></td><td>The object that the modifier is attached to</td></tr></tbody></table><p><a name="ExplodeModifier+toJSON"></a></p><h3 id="explodemodifier-tojson-⇒-object" tabindex="-1"><a class="header-anchor" href="#explodemodifier-tojson-⇒-object" aria-hidden="true">#</a> explodeModifier.toJSON() ⇒ <code>Object</code></h3><p>Return an object for JSON serialising.</p><p>This is called automatically when JSON encoding the object.</p><p><strong>Kind</strong>: instance method of <a href="#ExplodeModifier"><code>ExplodeModifier</code></a></p>',42),a=[i];function n(c,l){return o(),d("div",null,a)}const h=e(r,[["render",n],["__file","ExplodeModifier.html.vue"]]);export{h as default};
