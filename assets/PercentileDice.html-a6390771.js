import{_ as e,o as d,c as t,e as i}from"./app-e7f8d9af.js";const c={},r=i('<h1 id="percentiledice" tabindex="-1"><a class="header-anchor" href="#percentiledice" aria-hidden="true">#</a> PercentileDice</h1><p><a name="PercentileDice"></a></p><h2 id="percentiledice-⇐-standarddice" tabindex="-1"><a class="header-anchor" href="#percentiledice-⇐-standarddice" aria-hidden="true">#</a> PercentileDice ⇐ <code>StandardDice</code></h2><p>Represents a percentile die.</p><p><strong>Kind</strong>: global class<br><strong>Extends</strong>: <code>StandardDice</code></p><ul><li><a href="#PercentileDice">PercentileDice</a> ⇐ <code>StandardDice</code><ul><li><a href="#new_PercentileDice_new">new PercentileDice([qty], [modifiers], [sidesAsNumber], [description])</a></li><li><a href="#PercentileDice+name">.name</a> ⇒ <code>string</code></li><li><a href="#PercentileDice+sides">.sides</a> ⇒ <code>number</code> | <code>string</code></li></ul></li></ul><p><a name="new_PercentileDice_new"></a></p><h3 id="new-percentiledice-qty-modifiers-sidesasnumber-description" tabindex="-1"><a class="header-anchor" href="#new-percentiledice-qty-modifiers-sidesasnumber-description" aria-hidden="true">#</a> new PercentileDice([qty], [modifiers], [sidesAsNumber], [description])</h3><p>Create a <code>PercentileDice</code> instance.</p><p><strong>Throws</strong>:</p><ul><li><code>TypeError</code> qty must be a positive integer, and modifiers must be valid</li></ul><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>[qty]</td><td><code>number</code></td><td><code>1</code></td><td>The number of dice to roll (e.g. <code>4</code>)</td></tr><tr><td>[modifiers]</td><td><code>Map.&lt;string, Modifier&gt;</code> | <code>Array.&lt;Modifier&gt;</code> | <code>Object</code> | <code>null</code></td><td><code></code></td><td>The modifiers that affect the die</td></tr><tr><td>[sidesAsNumber]</td><td><code>boolean</code></td><td><code>false</code></td><td>Whether to show the sides as <code>%</code> (default) or <code>100</code></td></tr><tr><td>[description]</td><td><code>Description</code> | <code>string</code> | <code>null</code></td><td><code></code></td><td>The roll description.</td></tr></tbody></table><p><a name="PercentileDice+name"></a></p><h3 id="percentiledice-name-⇒-string" tabindex="-1"><a class="header-anchor" href="#percentiledice-name-⇒-string" aria-hidden="true">#</a> percentileDice.name ⇒ <code>string</code></h3><p>The name of the die.</p><p><strong>Kind</strong>: instance property of <a href="#PercentileDice"><code>PercentileDice</code></a><br><strong>Returns</strong>: <code>string</code> - &#39;percentile&#39;<br><a name="PercentileDice+sides"></a></p><h3 id="percentiledice-sides-⇒-number-string" tabindex="-1"><a class="header-anchor" href="#percentiledice-sides-⇒-number-string" aria-hidden="true">#</a> percentileDice.sides ⇒ <code>number</code> | <code>string</code></h3><p>The number of sides the die has</p><p><strong>Kind</strong>: instance property of <a href="#PercentileDice"><code>PercentileDice</code></a><br><strong>Returns</strong>: <code>number</code> | <code>string</code> - <code>%</code> if <code>sidesAsNumber == false</code>, or <code>100</code> otherwise</p>',19),n=[r];function o(a,s){return d(),t("div",null,n)}const h=e(c,[["render",o],["__file","PercentileDice.html.vue"]]);export{h as default};
