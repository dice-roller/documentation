import{_ as e,o as s,c as a,e as t}from"./app-e7f8d9af.js";const n={},o=t(`<h1 id="resultgroup" tabindex="-1"><a class="header-anchor" href="#resultgroup" aria-hidden="true">#</a> ResultGroup</h1><p><a name="ResultGroup"></a></p><h2 id="resultgroup-1" tabindex="-1"><a class="header-anchor" href="#resultgroup-1" aria-hidden="true">#</a> ResultGroup</h2><p>A collection of results and expressions. Usually used to represent the results of a <code>RollGroup</code> instance.</p><p>This can contain <code>ResultGroup</code>, <code>RollResults</code>, operators, and plain numbers.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You will probably not need to create your own <code>ResultGroup</code> instances, unless you&#39;re importing rolls, but <code>ResultGroup</code> objects will be returned when rolling group rolls.</p></div><p><strong>Kind</strong>: global class<br><strong>Since</strong>: 4.5.0</p><ul><li><a href="#ResultGroup">ResultGroup</a><ul><li><a href="#new_ResultGroup_new">new ResultGroup([results], [modifiers], [isRollGroup], [useInTotal])</a></li><li><a href="#ResultGroup+calculationValue">.calculationValue</a> ⇒ <code>number</code></li><li><a href="#ResultGroup+calculationValue">.calculationValue</a></li><li><a href="#ResultGroup+isRollGroup">.isRollGroup</a> ⇒ <code>boolean</code></li><li><a href="#ResultGroup+isRollGroup">.isRollGroup</a></li><li><a href="#ResultGroup+length">.length</a> ⇒ <code>number</code></li><li><a href="#ResultGroup+modifierFlags">.modifierFlags</a> ⇒ <code>string</code></li><li><a href="#ResultGroup+modifiers">.modifiers</a> ⇒ <code>Set.&lt;string&gt;</code></li><li><a href="#ResultGroup+modifiers">.modifiers</a></li><li><a href="#ResultGroup+results">.results</a> ⇒ <code>Array.&lt;(ResultGroup|RollResults|number|string)&gt;</code></li><li><a href="#ResultGroup+results">.results</a></li><li><a href="#ResultGroup+useInTotal">.useInTotal</a> ⇒ <code>boolean</code></li><li><a href="#ResultGroup+useInTotal">.useInTotal</a></li><li><a href="#ResultGroup+value">.value</a> ⇒ <code>number</code></li><li><a href="#ResultGroup+addResult">.addResult(value)</a></li><li><a href="#ResultGroup+toJSON">.toJSON()</a> ⇒ <code>Object</code></li><li><a href="#ResultGroup+toString">.toString()</a> ⇒ <code>string</code></li></ul></li></ul><p><a name="new_ResultGroup_new"></a></p><h3 id="new-resultgroup-results-modifiers-isrollgroup-useintotal" tabindex="-1"><a class="header-anchor" href="#new-resultgroup-results-modifiers-isrollgroup-useintotal" aria-hidden="true">#</a> new ResultGroup([results], [modifiers], [isRollGroup], [useInTotal])</h3><p>Create a <code>ResultGroup</code> instance.</p><p><strong>Throws</strong>:</p><ul><li><code>TypeError</code> Rolls must be an array</li></ul><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>[results]</td><td><code>Array.&lt;(ResultGroup|RollResults|number|string)&gt;</code></td><td><code>[]</code></td><td>The results and expressions</td></tr><tr><td>[modifiers]</td><td><code>Array.&lt;string&gt;</code> | <code>Set.&lt;string&gt;</code></td><td><code>[]</code></td><td>List of modifier names that affect the group</td></tr><tr><td>[isRollGroup]</td><td><code>boolean</code></td><td><code>false</code></td><td>Whether the result group represents a roll group or not</td></tr><tr><td>[useInTotal]</td><td><code>boolean</code></td><td><code>true</code></td><td>Whether to include the group&#39;s value when calculating totals</td></tr></tbody></table><p><strong>Example</strong> <em>(Normal roll: \`4d6+2d10\`)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultGroup</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
 <span class="token keyword">new</span> <span class="token class-name">RollResults</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span>
 <span class="token keyword">new</span> <span class="token class-name">RollResults</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example</strong> <em>(Roll group: \`{4d6+2d10/2, 5d6/2d%}\`)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultGroup</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
 <span class="token keyword">new</span> <span class="token class-name">ResultGroup</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
   <span class="token keyword">new</span> <span class="token class-name">RollResults</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span>
   <span class="token keyword">new</span> <span class="token class-name">RollResults</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
   <span class="token number">2</span><span class="token punctuation">,</span>
 <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token keyword">new</span> <span class="token class-name">ResultGroup</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
   <span class="token keyword">new</span> <span class="token class-name">RollResults</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
   <span class="token keyword">new</span> <span class="token class-name">RollResults</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="ResultGroup+calculationValue"></a></p><h3 id="resultgroup-calculationvalue-⇒-number" tabindex="-1"><a class="header-anchor" href="#resultgroup-calculationvalue-⇒-number" aria-hidden="true">#</a> resultGroup.calculationValue ⇒ <code>number</code></h3><p>The value to use in calculations. This may be changed by modifiers.</p><p><strong>Kind</strong>: instance property of <a href="#ResultGroup"><code>ResultGroup</code></a><br><a name="ResultGroup+calculationValue"></a></p><h3 id="resultgroup-calculationvalue" tabindex="-1"><a class="header-anchor" href="#resultgroup-calculationvalue" aria-hidden="true">#</a> resultGroup.calculationValue</h3><p>Set the value to use in calculations.</p><p><strong>Kind</strong>: instance property of <a href="#ResultGroup"><code>ResultGroup</code></a><br><strong>Throws</strong>:</p><ul><li><code>TypeError</code> value is invalid</li></ul><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><code>number</code></td></tr></tbody></table><p><a name="ResultGroup+isRollGroup"></a></p><h3 id="resultgroup-isrollgroup-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#resultgroup-isrollgroup-⇒-boolean" aria-hidden="true">#</a> resultGroup.isRollGroup ⇒ <code>boolean</code></h3><p>Whether the result group represents a roll group or not.</p><p><strong>Kind</strong>: instance property of <a href="#ResultGroup"><code>ResultGroup</code></a><br><strong>Returns</strong>: <code>boolean</code> - <code>true</code> if it is a roll group, <code>false</code> otherwise<br><a name="ResultGroup+isRollGroup"></a></p><h3 id="resultgroup-isrollgroup" tabindex="-1"><a class="header-anchor" href="#resultgroup-isrollgroup" aria-hidden="true">#</a> resultGroup.isRollGroup</h3><p>Set whether the result group represents a roll group or not.</p><p><strong>Kind</strong>: instance property of <a href="#ResultGroup"><code>ResultGroup</code></a></p><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><code>boolean</code></td></tr></tbody></table><p><a name="ResultGroup+length"></a></p><h3 id="resultgroup-length-⇒-number" tabindex="-1"><a class="header-anchor" href="#resultgroup-length-⇒-number" aria-hidden="true">#</a> resultGroup.length ⇒ <code>number</code></h3><p>The number of results.</p><p><strong>Kind</strong>: instance property of <a href="#ResultGroup"><code>ResultGroup</code></a><br><a name="ResultGroup+modifierFlags"></a></p><h3 id="resultgroup-modifierflags-⇒-string" tabindex="-1"><a class="header-anchor" href="#resultgroup-modifierflags-⇒-string" aria-hidden="true">#</a> resultGroup.modifierFlags ⇒ <code>string</code></h3><p>The visual flags for the modifiers that affect the group.</p><p><strong>Kind</strong>: instance property of <a href="#ResultGroup"><code>ResultGroup</code></a><br><strong>See</strong>: <a href="#ResultGroup+modifiers">modifiers</a><br><a name="ResultGroup+modifiers"></a></p><h3 id="resultgroup-modifiers-⇒-set-string" tabindex="-1"><a class="header-anchor" href="#resultgroup-modifiers-⇒-set-string" aria-hidden="true">#</a> resultGroup.modifiers ⇒ <code>Set.&lt;string&gt;</code></h3><p>The modifier names that affect the group.</p><p><strong>Kind</strong>: instance property of <a href="#ResultGroup"><code>ResultGroup</code></a><br><a name="ResultGroup+modifiers"></a></p><h3 id="resultgroup-modifiers" tabindex="-1"><a class="header-anchor" href="#resultgroup-modifiers" aria-hidden="true">#</a> resultGroup.modifiers</h3><p>Set the modifier names that affect the group.</p><p><strong>Kind</strong>: instance property of <a href="#ResultGroup"><code>ResultGroup</code></a><br><strong>Throws</strong>:</p><ul><li><code>TypeError</code> modifiers must be a Set or array of modifier names</li></ul><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><code>Array.&lt;string&gt;</code> | <code>Set.&lt;string&gt;</code></td></tr></tbody></table><p><strong>Example</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>resultGroup<span class="token punctuation">.</span>modifiers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;drop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;target-success&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="ResultGroup+results"></a></p><h3 id="resultgroup-results-⇒-array-resultgroup-rollresults-number-string" tabindex="-1"><a class="header-anchor" href="#resultgroup-results-⇒-array-resultgroup-rollresults-number-string" aria-hidden="true">#</a> resultGroup.results ⇒ <code>Array.&lt;(ResultGroup|RollResults|number|string)&gt;</code></h3><p>List of results.</p><p><strong>Kind</strong>: instance property of <a href="#ResultGroup"><code>ResultGroup</code></a><br><a name="ResultGroup+results"></a></p><h3 id="resultgroup-results" tabindex="-1"><a class="header-anchor" href="#resultgroup-results" aria-hidden="true">#</a> resultGroup.results</h3><p>Set the results.</p><p><strong>Kind</strong>: instance property of <a href="#ResultGroup"><code>ResultGroup</code></a><br><strong>Throws</strong>:</p><ul><li><code>TypeError</code> Results must be an array</li></ul><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>results</td><td><code>Array.&lt;(ResultGroup|RollResults|number|string)&gt;</code></td></tr></tbody></table><p><a name="ResultGroup+useInTotal"></a></p><h3 id="resultgroup-useintotal-⇒-boolean" tabindex="-1"><a class="header-anchor" href="#resultgroup-useintotal-⇒-boolean" aria-hidden="true">#</a> resultGroup.useInTotal ⇒ <code>boolean</code></h3><p>Whether to use the value in total calculations or not.</p><p><strong>Kind</strong>: instance property of <a href="#ResultGroup"><code>ResultGroup</code></a><br><a name="ResultGroup+useInTotal"></a></p><h3 id="resultgroup-useintotal" tabindex="-1"><a class="header-anchor" href="#resultgroup-useintotal" aria-hidden="true">#</a> resultGroup.useInTotal</h3><p>Set whether to use the value in total calculations or not.</p><p><strong>Kind</strong>: instance property of <a href="#ResultGroup"><code>ResultGroup</code></a></p><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><code>boolean</code></td></tr></tbody></table><p><a name="ResultGroup+value"></a></p><h3 id="resultgroup-value-⇒-number" tabindex="-1"><a class="header-anchor" href="#resultgroup-value-⇒-number" aria-hidden="true">#</a> resultGroup.value ⇒ <code>number</code></h3><p>The total value of all the results after modifiers have been applied.</p><p><strong>Kind</strong>: instance property of <a href="#ResultGroup"><code>ResultGroup</code></a><br><a name="ResultGroup+addResult"></a></p><h3 id="resultgroup-addresult-value" tabindex="-1"><a class="header-anchor" href="#resultgroup-addresult-value" aria-hidden="true">#</a> resultGroup.addResult(value)</h3><p>Add a single result to the list.</p><p><strong>Kind</strong>: instance method of <a href="#ResultGroup"><code>ResultGroup</code></a><br><strong>Throws</strong>:</p><ul><li><code>TypeError</code> Value type is invalid</li></ul><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><a href="#ResultGroup"><code>ResultGroup</code></a> | <code>RollResults</code> | <code>number</code> | <code>string</code></td></tr></tbody></table><p><a name="ResultGroup+toJSON"></a></p><h3 id="resultgroup-tojson-⇒-object" tabindex="-1"><a class="header-anchor" href="#resultgroup-tojson-⇒-object" aria-hidden="true">#</a> resultGroup.toJSON() ⇒ <code>Object</code></h3><p>Return an object for JSON serialising.</p><p>This is called automatically when JSON encoding the object.</p><p><strong>Kind</strong>: instance method of <a href="#ResultGroup"><code>ResultGroup</code></a><br><a name="ResultGroup+toString"></a></p><h3 id="resultgroup-tostring-⇒-string" tabindex="-1"><a class="header-anchor" href="#resultgroup-tostring-⇒-string" aria-hidden="true">#</a> resultGroup.toString() ⇒ <code>string</code></h3><p>Return the String representation of the object.</p><p>This is called automatically when casting the object to a string.</p><p><strong>Kind</strong>: instance method of <a href="#ResultGroup"><code>ResultGroup</code></a></p>`,87),r=[o];function l(u,p){return s(),a("div",null,r)}const i=e(n,[["render",l],["__file","ResultGroup.html.vue"]]);export{i as default};
