import{_ as e,o,c as t,e as a}from"./app-e7f8d9af.js";const r={},l=a(`<h1 id="diceroller" tabindex="-1"><a class="header-anchor" href="#diceroller" aria-hidden="true">#</a> DiceRoller</h1><p><a name="DiceRoller"></a></p><h2 id="diceroller-1" tabindex="-1"><a class="header-anchor" href="#diceroller-1" aria-hidden="true">#</a> DiceRoller</h2><p>A <code>DiceRoller</code> handles dice rolling functionality, keeps a history of rolls and can output logs etc.</p><p><strong>Kind</strong>: global class<br><strong>See</strong>: <a href="DiceRoll">DiceRoll</a> if you don&#39;t need to keep a log history of rolls</p><ul><li><a href="#DiceRoller">DiceRoller</a><ul><li><a href="#new_DiceRoller_new">new DiceRoller([data])</a></li><li><em>instance</em><ul><li><a href="#DiceRoller+log">.log</a> ⇒ <code>Array.&lt;DiceRoll&gt;</code></li><li><a href="#DiceRoller+output">.output</a> ⇒ <code>string</code></li><li><a href="#DiceRoller+total">.total</a> ⇒ <code>number</code></li><li><a href="#DiceRoller+clearLog">.clearLog()</a></li><li><a href="#DiceRoller+export">.export([format])</a> ⇒ <code>string</code> | <code>null</code></li><li><a href="#DiceRoller+import">.import(data)</a> ⇒ <code>Array.&lt;DiceRoll&gt;</code></li><li><a href="#DiceRoller+roll">.roll(...notations)</a> ⇒ <code>DiceRoll</code> | <code>Array.&lt;DiceRoll&gt;</code></li><li><a href="#DiceRoller+toJSON">.toJSON()</a> ⇒ <code>Object</code></li><li><a href="#DiceRoller+toString">.toString()</a> ⇒ <code>string</code></li></ul></li><li><em>static</em><ul><li><a href="#DiceRoller.import">.import(data)</a> ⇒ <a href="#DiceRoller"><code>DiceRoller</code></a></li></ul></li></ul></li></ul><p><a name="new_DiceRoller_new"></a></p><h3 id="new-diceroller-data" tabindex="-1"><a class="header-anchor" href="#new-diceroller-data" aria-hidden="true">#</a> new DiceRoller([data])</h3><p>Create a DiceRoller.</p><p>The optional <code>data</code> property should be either an array of <code>DiceRoll</code> objects, or an object with a <code>log</code> property that contains the <code>DiceRoll</code> objects.</p><p><strong>Throws</strong>:</p><ul><li><code>TypeError</code> if data is an object, it must have a <code>log[]</code> property</li></ul><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>[data]</td><td><code>Object</code> | <code>Array.&lt;DiceRoll&gt;</code></td><td>The data to import</td></tr><tr><td>[data.log]</td><td><code>Array.&lt;DiceRoll&gt;</code></td><td>If <code>data</code> is an object, it must contain an array of <code>DiceRoll</code>s</td></tr></tbody></table><p><a name="DiceRoller+log"></a></p><h3 id="diceroller-log-⇒-array-diceroll" tabindex="-1"><a class="header-anchor" href="#diceroller-log-⇒-array-diceroll" aria-hidden="true">#</a> diceRoller.log ⇒ <code>Array.&lt;DiceRoll&gt;</code></h3><p>The list of roll logs.</p><p><strong>Kind</strong>: instance property of <a href="#DiceRoller"><code>DiceRoller</code></a><br><a name="DiceRoller+output"></a></p><h3 id="diceroller-output-⇒-string" tabindex="-1"><a class="header-anchor" href="#diceroller-output-⇒-string" aria-hidden="true">#</a> diceRoller.output ⇒ <code>string</code></h3><p>String representation of the rolls in the log</p><p><strong>Kind</strong>: instance property of <a href="#DiceRoller"><code>DiceRoller</code></a><br><strong>Example</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>2d20<span class="token operator">+</span>1d6<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span> 1d8<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="DiceRoller+total"></a></p><h3 id="diceroller-total-⇒-number" tabindex="-1"><a class="header-anchor" href="#diceroller-total-⇒-number" aria-hidden="true">#</a> diceRoller.total ⇒ <code>number</code></h3><p>The sum of all the rolls in the log</p><p><strong>Kind</strong>: instance property of <a href="#DiceRoller"><code>DiceRoller</code></a><br><strong>See</strong>: <a href="#DiceRoller+log">log</a><br><a name="DiceRoller+clearLog"></a></p><h3 id="diceroller-clearlog" tabindex="-1"><a class="header-anchor" href="#diceroller-clearlog" aria-hidden="true">#</a> diceRoller.clearLog()</h3><p>Clear the roll history log.</p><p><strong>Kind</strong>: instance method of <a href="#DiceRoller"><code>DiceRoller</code></a><br><strong>See</strong>: <a href="#DiceRoller+log">log</a><br><a name="DiceRoller+export"></a></p><h3 id="diceroller-export-format-⇒-string-null" tabindex="-1"><a class="header-anchor" href="#diceroller-export-format-⇒-string-null" aria-hidden="true">#</a> diceRoller.export([format]) ⇒ <code>string</code> | <code>null</code></h3><p>Export the object in the given format. If no format is specified, JSON is returned.</p><p><strong>Kind</strong>: instance method of <a href="#DiceRoller"><code>DiceRoller</code></a><br><strong>Returns</strong>: <code>string</code> | <code>null</code> - The exported data, in the specified format<br><strong>Throws</strong>:</p><ul><li><code>TypeError</code> Invalid export format</li></ul><p><strong>See</strong>: <a href="#DiceRoller+toJSON">toJSON</a></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>[format]</td><td><code>exportFormats</code></td><td><code>exportFormats#JSON</code></td><td>The format to export the data as</td></tr></tbody></table><p><a name="DiceRoller+import"></a></p><h3 id="diceroller-import-data-⇒-array-diceroll" tabindex="-1"><a class="header-anchor" href="#diceroller-import-data-⇒-array-diceroll" aria-hidden="true">#</a> diceRoller.import(data) ⇒ <code>Array.&lt;DiceRoll&gt;</code></h3><p>Add the data to the existing <a href="#DiceRoller+log">roll log</a>.</p><p><code>data</code> can be an array of <code>DiceRoll</code> objects, an object with a <code>log</code> property that contains <code>DiceRoll</code> objects, or a JSON / base64 encoded representation of either.</p><p><strong>Kind</strong>: instance method of <a href="#DiceRoller"><code>DiceRoller</code></a><br><strong>Returns</strong>: <code>Array.&lt;DiceRoll&gt;</code> - The roll log<br><strong>Throws</strong>:</p><ul><li><code>DataFormatError</code> data format invalid</li><li><code>RequiredArgumentError</code> data is required</li><li><code>TypeError</code> log must be an array</li></ul><p><strong>See</strong>: <a href="#DiceRoller+log">log</a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>data</td><td><code>string</code> | <code>Object</code> | <code>Array.&lt;DiceRoll&gt;</code></td><td>The data to import</td></tr><tr><td>[data.log]</td><td><code>Array.&lt;DiceRoll&gt;</code></td><td>If <code>data</code> is an object, it must contain an array of <code>DiceRoll</code>s</td></tr></tbody></table><p><a name="DiceRoller+roll"></a></p><h3 id="diceroller-roll-notations-⇒-diceroll-array-diceroll" tabindex="-1"><a class="header-anchor" href="#diceroller-roll-notations-⇒-diceroll-array-diceroll" aria-hidden="true">#</a> diceRoller.roll(...notations) ⇒ <code>DiceRoll</code> | <code>Array.&lt;DiceRoll&gt;</code></h3><p>Roll the given dice notation(s) and return the corresponding <code>DiceRoll</code> objects.</p><p>You can roll a single notation, or multiple at once.</p><p><strong>Kind</strong>: instance method of <a href="#DiceRoller"><code>DiceRoller</code></a><br><strong>Returns</strong>: <code>DiceRoll</code> | <code>Array.&lt;DiceRoll&gt;</code> - If a single notation is passed, a single <code>DiceRoll</code> is returned, otherwise an array of <code>DiceRoll</code> objects is returned<br><strong>Throws</strong>:</p><ul><li><code>NotationError</code> notation is invalid</li><li><code>RequiredArgumentError</code> notation is required</li></ul><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>...notations</td><td><code>string</code></td><td>The notations to roll</td></tr></tbody></table><p><strong>Example</strong> <em>(Single notation)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>diceRoller<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;2d6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Example</strong> <em>(Multiple notations)</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">roll</span><span class="token punctuation">(</span><span class="token string">&#39;2d6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4d10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d8+4d6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="DiceRoller+toJSON"></a></p><h3 id="diceroller-tojson-⇒-object" tabindex="-1"><a class="header-anchor" href="#diceroller-tojson-⇒-object" aria-hidden="true">#</a> diceRoller.toJSON() ⇒ <code>Object</code></h3><p>Return an object for JSON serialising.</p><p>This is called automatically when JSON encoding the object.</p><p><strong>Kind</strong>: instance method of <a href="#DiceRoller"><code>DiceRoller</code></a><br><a name="DiceRoller+toString"></a></p><h3 id="diceroller-tostring-⇒-string" tabindex="-1"><a class="header-anchor" href="#diceroller-tostring-⇒-string" aria-hidden="true">#</a> diceRoller.toString() ⇒ <code>string</code></h3><p>Return the String representation of the object.</p><p>This is called automatically when casting the object to a string.</p><p><strong>Kind</strong>: instance method of <a href="#DiceRoller"><code>DiceRoller</code></a><br><strong>See</strong>: <a href="#DiceRoller+output">output</a><br><a name="DiceRoller.import"></a></p><h3 id="diceroller-import-data-⇒-diceroller" tabindex="-1"><a class="header-anchor" href="#diceroller-import-data-⇒-diceroller" aria-hidden="true">#</a> DiceRoller.import(data) ⇒ <a href="#DiceRoller"><code>DiceRoller</code></a></h3><p>Create a new <code>DiceRoller</code> instance with the given data.</p><p><code>data</code> can be an array of <code>DiceRoll</code> objects, an object with a <code>log</code> property that contains the <code>DiceRoll</code> objects, or a JSON / base64 encoded representation of either.</p><p><strong>Kind</strong>: static method of <a href="#DiceRoller"><code>DiceRoller</code></a><br><strong>Returns</strong>: <a href="#DiceRoller"><code>DiceRoller</code></a> - The new <code>DiceRoller</code> instance<br><strong>Throws</strong>:</p><ul><li><code>DataFormatError</code> data format invalid</li><li><code>RequiredArgumentError</code> data is required</li><li><code>TypeError</code> log must be an array</li></ul><p><strong>See</strong>: instance method <a href="#DiceRoller+import">import</a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>data</td><td><code>string</code> | <code>Object</code> | <code>Array.&lt;DiceRoll&gt;</code></td><td>The data to import</td></tr><tr><td>[data.log]</td><td><code>Array.&lt;DiceRoll&gt;</code></td><td>If <code>data</code> is an object, it must contain an array of <code>DiceRoll</code>s</td></tr></tbody></table>`,69),c=[l];function n(i,d){return o(),t("div",null,c)}const p=e(r,[["render",n],["__file","DiceRoller.html.vue"]]);export{p as default};
